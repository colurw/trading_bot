/* 
 * BitMEX API
 *
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Summary of Open and Closed Positions
    /// </summary>
    [DataContract]
    public partial class Position :  IEquatable<Position>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Position" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Position() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Position" /> class.
        /// </summary>
        /// <param name="account">account (required) (default to 0).</param>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="currency">currency.</param>
        /// <param name="underlying">underlying.</param>
        /// <param name="quoteCurrency">quoteCurrency.</param>
        /// <param name="commission">commission (default to 0.0).</param>
        /// <param name="initMarginReq">initMarginReq (default to 0.0).</param>
        /// <param name="maintMarginReq">maintMarginReq (default to 0.0).</param>
        /// <param name="riskLimit">riskLimit (default to 0).</param>
        /// <param name="leverage">leverage (default to 0.0).</param>
        /// <param name="crossMargin">crossMargin.</param>
        /// <param name="deleveragePercentile">deleveragePercentile (default to 0.0).</param>
        /// <param name="rebalancedPnl">rebalancedPnl (default to 0).</param>
        /// <param name="prevRealisedPnl">prevRealisedPnl (default to 0).</param>
        /// <param name="prevUnrealisedPnl">prevUnrealisedPnl (default to 0).</param>
        /// <param name="openingQty">openingQty (default to 0).</param>
        /// <param name="openOrderBuyQty">openOrderBuyQty (default to 0).</param>
        /// <param name="openOrderBuyCost">openOrderBuyCost (default to 0).</param>
        /// <param name="openOrderBuyPremium">openOrderBuyPremium (default to 0).</param>
        /// <param name="openOrderSellQty">openOrderSellQty (default to 0).</param>
        /// <param name="openOrderSellCost">openOrderSellCost (default to 0).</param>
        /// <param name="openOrderSellPremium">openOrderSellPremium (default to 0).</param>
        /// <param name="currentQty">currentQty (default to 0).</param>
        /// <param name="currentCost">currentCost (default to 0).</param>
        /// <param name="currentComm">currentComm (default to 0).</param>
        /// <param name="realisedCost">realisedCost (default to 0).</param>
        /// <param name="unrealisedCost">unrealisedCost (default to 0).</param>
        /// <param name="grossOpenPremium">grossOpenPremium (default to 0).</param>
        /// <param name="isOpen">isOpen.</param>
        /// <param name="markPrice">markPrice (default to 0.0).</param>
        /// <param name="markValue">markValue (default to 0).</param>
        /// <param name="riskValue">riskValue (default to 0).</param>
        /// <param name="homeNotional">homeNotional (default to 0.0).</param>
        /// <param name="foreignNotional">foreignNotional (default to 0.0).</param>
        /// <param name="posState">posState.</param>
        /// <param name="posCost">posCost (default to 0).</param>
        /// <param name="posCross">posCross (default to 0).</param>
        /// <param name="posComm">posComm (default to 0).</param>
        /// <param name="posLoss">posLoss (default to 0).</param>
        /// <param name="posMargin">posMargin (default to 0).</param>
        /// <param name="posMaint">posMaint (default to 0).</param>
        /// <param name="initMargin">initMargin (default to 0).</param>
        /// <param name="maintMargin">maintMargin (default to 0).</param>
        /// <param name="realisedPnl">realisedPnl (default to 0).</param>
        /// <param name="unrealisedPnl">unrealisedPnl (default to 0).</param>
        /// <param name="unrealisedPnlPcnt">unrealisedPnlPcnt (default to 0.0).</param>
        /// <param name="unrealisedRoePcnt">unrealisedRoePcnt (default to 0.0).</param>
        /// <param name="avgCostPrice">avgCostPrice (default to 0.0).</param>
        /// <param name="avgEntryPrice">avgEntryPrice (default to 0.0).</param>
        /// <param name="breakEvenPrice">breakEvenPrice (default to 0.0).</param>
        /// <param name="marginCallPrice">marginCallPrice (default to 0.0).</param>
        /// <param name="liquidationPrice">liquidationPrice (default to 0.0).</param>
        /// <param name="bankruptPrice">bankruptPrice (default to 0.0).</param>
        /// <param name="timestamp">timestamp.</param>
        public Position(long? account = 0, string symbol = default(string), string currency = default(string), string underlying = default(string), string quoteCurrency = default(string), double? commission = 0.0, double? initMarginReq = 0.0, double? maintMarginReq = 0.0, long? riskLimit = 0, double? leverage = 0.0, bool? crossMargin = default(bool?), double? deleveragePercentile = 0.0, long? rebalancedPnl = 0, long? prevRealisedPnl = 0, long? prevUnrealisedPnl = 0, long? openingQty = 0, long? openOrderBuyQty = 0, long? openOrderBuyCost = 0, long? openOrderBuyPremium = 0, long? openOrderSellQty = 0, long? openOrderSellCost = 0, long? openOrderSellPremium = 0, long? currentQty = 0, long? currentCost = 0, long? currentComm = 0, long? realisedCost = 0, long? unrealisedCost = 0, long? grossOpenPremium = 0, bool? isOpen = default(bool?), double? markPrice = 0.0, long? markValue = 0, long? riskValue = 0, double? homeNotional = 0.0, double? foreignNotional = 0.0, string posState = default(string), long? posCost = 0, long? posCross = 0, long? posComm = 0, long? posLoss = 0, long? posMargin = 0, long? posMaint = 0, long? initMargin = 0, long? maintMargin = 0, long? realisedPnl = 0, long? unrealisedPnl = 0, double? unrealisedPnlPcnt = 0.0, double? unrealisedRoePcnt = 0.0, double? avgCostPrice = 0.0, double? avgEntryPrice = 0.0, double? breakEvenPrice = 0.0, double? marginCallPrice = 0.0, double? liquidationPrice = 0.0, double? bankruptPrice = 0.0, DateTime? timestamp = default(DateTime?))
        {
            // to ensure "account" is required (not null)
            if (account == null)
            {
                throw new InvalidDataException("account is a required property for Position and cannot be null");
            }
            else
            {
                this.Account = account;
            }
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for Position and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }
            this.Currency = currency;
            this.Underlying = underlying;
            this.QuoteCurrency = quoteCurrency;
            // use default value if no "commission" provided
            if (commission == null)
            {
                this.Commission = 0.0;
            }
            else
            {
                this.Commission = commission;
            }
            // use default value if no "initMarginReq" provided
            if (initMarginReq == null)
            {
                this.InitMarginReq = 0.0;
            }
            else
            {
                this.InitMarginReq = initMarginReq;
            }
            // use default value if no "maintMarginReq" provided
            if (maintMarginReq == null)
            {
                this.MaintMarginReq = 0.0;
            }
            else
            {
                this.MaintMarginReq = maintMarginReq;
            }
            // use default value if no "riskLimit" provided
            if (riskLimit == null)
            {
                this.RiskLimit = 0;
            }
            else
            {
                this.RiskLimit = riskLimit;
            }
            // use default value if no "leverage" provided
            if (leverage == null)
            {
                this.Leverage = 0.0;
            }
            else
            {
                this.Leverage = leverage;
            }
            this.CrossMargin = crossMargin;
            // use default value if no "deleveragePercentile" provided
            if (deleveragePercentile == null)
            {
                this.DeleveragePercentile = 0.0;
            }
            else
            {
                this.DeleveragePercentile = deleveragePercentile;
            }
            // use default value if no "rebalancedPnl" provided
            if (rebalancedPnl == null)
            {
                this.RebalancedPnl = 0;
            }
            else
            {
                this.RebalancedPnl = rebalancedPnl;
            }
            // use default value if no "prevRealisedPnl" provided
            if (prevRealisedPnl == null)
            {
                this.PrevRealisedPnl = 0;
            }
            else
            {
                this.PrevRealisedPnl = prevRealisedPnl;
            }
            // use default value if no "prevUnrealisedPnl" provided
            if (prevUnrealisedPnl == null)
            {
                this.PrevUnrealisedPnl = 0;
            }
            else
            {
                this.PrevUnrealisedPnl = prevUnrealisedPnl;
            }
            // use default value if no "openingQty" provided
            if (openingQty == null)
            {
                this.OpeningQty = 0;
            }
            else
            {
                this.OpeningQty = openingQty;
            }
            // use default value if no "openOrderBuyQty" provided
            if (openOrderBuyQty == null)
            {
                this.OpenOrderBuyQty = 0;
            }
            else
            {
                this.OpenOrderBuyQty = openOrderBuyQty;
            }
            // use default value if no "openOrderBuyCost" provided
            if (openOrderBuyCost == null)
            {
                this.OpenOrderBuyCost = 0;
            }
            else
            {
                this.OpenOrderBuyCost = openOrderBuyCost;
            }
            // use default value if no "openOrderBuyPremium" provided
            if (openOrderBuyPremium == null)
            {
                this.OpenOrderBuyPremium = 0;
            }
            else
            {
                this.OpenOrderBuyPremium = openOrderBuyPremium;
            }
            // use default value if no "openOrderSellQty" provided
            if (openOrderSellQty == null)
            {
                this.OpenOrderSellQty = 0;
            }
            else
            {
                this.OpenOrderSellQty = openOrderSellQty;
            }
            // use default value if no "openOrderSellCost" provided
            if (openOrderSellCost == null)
            {
                this.OpenOrderSellCost = 0;
            }
            else
            {
                this.OpenOrderSellCost = openOrderSellCost;
            }
            // use default value if no "openOrderSellPremium" provided
            if (openOrderSellPremium == null)
            {
                this.OpenOrderSellPremium = 0;
            }
            else
            {
                this.OpenOrderSellPremium = openOrderSellPremium;
            }
            // use default value if no "currentQty" provided
            if (currentQty == null)
            {
                this.CurrentQty = 0;
            }
            else
            {
                this.CurrentQty = currentQty;
            }
            // use default value if no "currentCost" provided
            if (currentCost == null)
            {
                this.CurrentCost = 0;
            }
            else
            {
                this.CurrentCost = currentCost;
            }
            // use default value if no "currentComm" provided
            if (currentComm == null)
            {
                this.CurrentComm = 0;
            }
            else
            {
                this.CurrentComm = currentComm;
            }
            // use default value if no "realisedCost" provided
            if (realisedCost == null)
            {
                this.RealisedCost = 0;
            }
            else
            {
                this.RealisedCost = realisedCost;
            }
            // use default value if no "unrealisedCost" provided
            if (unrealisedCost == null)
            {
                this.UnrealisedCost = 0;
            }
            else
            {
                this.UnrealisedCost = unrealisedCost;
            }
            // use default value if no "grossOpenPremium" provided
            if (grossOpenPremium == null)
            {
                this.GrossOpenPremium = 0;
            }
            else
            {
                this.GrossOpenPremium = grossOpenPremium;
            }
            this.IsOpen = isOpen;
            // use default value if no "markPrice" provided
            if (markPrice == null)
            {
                this.MarkPrice = 0.0;
            }
            else
            {
                this.MarkPrice = markPrice;
            }
            // use default value if no "markValue" provided
            if (markValue == null)
            {
                this.MarkValue = 0;
            }
            else
            {
                this.MarkValue = markValue;
            }
            // use default value if no "riskValue" provided
            if (riskValue == null)
            {
                this.RiskValue = 0;
            }
            else
            {
                this.RiskValue = riskValue;
            }
            // use default value if no "homeNotional" provided
            if (homeNotional == null)
            {
                this.HomeNotional = 0.0;
            }
            else
            {
                this.HomeNotional = homeNotional;
            }
            // use default value if no "foreignNotional" provided
            if (foreignNotional == null)
            {
                this.ForeignNotional = 0.0;
            }
            else
            {
                this.ForeignNotional = foreignNotional;
            }
            this.PosState = posState;
            // use default value if no "posCost" provided
            if (posCost == null)
            {
                this.PosCost = 0;
            }
            else
            {
                this.PosCost = posCost;
            }
            // use default value if no "posCross" provided
            if (posCross == null)
            {
                this.PosCross = 0;
            }
            else
            {
                this.PosCross = posCross;
            }
            // use default value if no "posComm" provided
            if (posComm == null)
            {
                this.PosComm = 0;
            }
            else
            {
                this.PosComm = posComm;
            }
            // use default value if no "posLoss" provided
            if (posLoss == null)
            {
                this.PosLoss = 0;
            }
            else
            {
                this.PosLoss = posLoss;
            }
            // use default value if no "posMargin" provided
            if (posMargin == null)
            {
                this.PosMargin = 0;
            }
            else
            {
                this.PosMargin = posMargin;
            }
            // use default value if no "posMaint" provided
            if (posMaint == null)
            {
                this.PosMaint = 0;
            }
            else
            {
                this.PosMaint = posMaint;
            }
            // use default value if no "initMargin" provided
            if (initMargin == null)
            {
                this.InitMargin = 0;
            }
            else
            {
                this.InitMargin = initMargin;
            }
            // use default value if no "maintMargin" provided
            if (maintMargin == null)
            {
                this.MaintMargin = 0;
            }
            else
            {
                this.MaintMargin = maintMargin;
            }
            // use default value if no "realisedPnl" provided
            if (realisedPnl == null)
            {
                this.RealisedPnl = 0;
            }
            else
            {
                this.RealisedPnl = realisedPnl;
            }
            // use default value if no "unrealisedPnl" provided
            if (unrealisedPnl == null)
            {
                this.UnrealisedPnl = 0;
            }
            else
            {
                this.UnrealisedPnl = unrealisedPnl;
            }
            // use default value if no "unrealisedPnlPcnt" provided
            if (unrealisedPnlPcnt == null)
            {
                this.UnrealisedPnlPcnt = 0.0;
            }
            else
            {
                this.UnrealisedPnlPcnt = unrealisedPnlPcnt;
            }
            // use default value if no "unrealisedRoePcnt" provided
            if (unrealisedRoePcnt == null)
            {
                this.UnrealisedRoePcnt = 0.0;
            }
            else
            {
                this.UnrealisedRoePcnt = unrealisedRoePcnt;
            }
            // use default value if no "avgCostPrice" provided
            if (avgCostPrice == null)
            {
                this.AvgCostPrice = 0.0;
            }
            else
            {
                this.AvgCostPrice = avgCostPrice;
            }
            // use default value if no "avgEntryPrice" provided
            if (avgEntryPrice == null)
            {
                this.AvgEntryPrice = 0.0;
            }
            else
            {
                this.AvgEntryPrice = avgEntryPrice;
            }
            // use default value if no "breakEvenPrice" provided
            if (breakEvenPrice == null)
            {
                this.BreakEvenPrice = 0.0;
            }
            else
            {
                this.BreakEvenPrice = breakEvenPrice;
            }
            // use default value if no "marginCallPrice" provided
            if (marginCallPrice == null)
            {
                this.MarginCallPrice = 0.0;
            }
            else
            {
                this.MarginCallPrice = marginCallPrice;
            }
            // use default value if no "liquidationPrice" provided
            if (liquidationPrice == null)
            {
                this.LiquidationPrice = 0.0;
            }
            else
            {
                this.LiquidationPrice = liquidationPrice;
            }
            // use default value if no "bankruptPrice" provided
            if (bankruptPrice == null)
            {
                this.BankruptPrice = 0.0;
            }
            else
            {
                this.BankruptPrice = bankruptPrice;
            }
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public long? Account { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Underlying
        /// </summary>
        [DataMember(Name="underlying", EmitDefaultValue=false)]
        public string Underlying { get; set; }

        /// <summary>
        /// Gets or Sets QuoteCurrency
        /// </summary>
        [DataMember(Name="quoteCurrency", EmitDefaultValue=false)]
        public string QuoteCurrency { get; set; }

        /// <summary>
        /// Gets or Sets Commission
        /// </summary>
        [DataMember(Name="commission", EmitDefaultValue=false)]
        public double? Commission { get; set; }

        /// <summary>
        /// Gets or Sets InitMarginReq
        /// </summary>
        [DataMember(Name="initMarginReq", EmitDefaultValue=false)]
        public double? InitMarginReq { get; set; }

        /// <summary>
        /// Gets or Sets MaintMarginReq
        /// </summary>
        [DataMember(Name="maintMarginReq", EmitDefaultValue=false)]
        public double? MaintMarginReq { get; set; }

        /// <summary>
        /// Gets or Sets RiskLimit
        /// </summary>
        [DataMember(Name="riskLimit", EmitDefaultValue=false)]
        public long? RiskLimit { get; set; }

        /// <summary>
        /// Gets or Sets Leverage
        /// </summary>
        [DataMember(Name="leverage", EmitDefaultValue=false)]
        public double? Leverage { get; set; }

        /// <summary>
        /// Gets or Sets CrossMargin
        /// </summary>
        [DataMember(Name="crossMargin", EmitDefaultValue=false)]
        public bool? CrossMargin { get; set; }

        /// <summary>
        /// Gets or Sets DeleveragePercentile
        /// </summary>
        [DataMember(Name="deleveragePercentile", EmitDefaultValue=false)]
        public double? DeleveragePercentile { get; set; }

        /// <summary>
        /// Gets or Sets RebalancedPnl
        /// </summary>
        [DataMember(Name="rebalancedPnl", EmitDefaultValue=false)]
        public long? RebalancedPnl { get; set; }

        /// <summary>
        /// Gets or Sets PrevRealisedPnl
        /// </summary>
        [DataMember(Name="prevRealisedPnl", EmitDefaultValue=false)]
        public long? PrevRealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets PrevUnrealisedPnl
        /// </summary>
        [DataMember(Name="prevUnrealisedPnl", EmitDefaultValue=false)]
        public long? PrevUnrealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets OpeningQty
        /// </summary>
        [DataMember(Name="openingQty", EmitDefaultValue=false)]
        public long? OpeningQty { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderBuyQty
        /// </summary>
        [DataMember(Name="openOrderBuyQty", EmitDefaultValue=false)]
        public long? OpenOrderBuyQty { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderBuyCost
        /// </summary>
        [DataMember(Name="openOrderBuyCost", EmitDefaultValue=false)]
        public long? OpenOrderBuyCost { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderBuyPremium
        /// </summary>
        [DataMember(Name="openOrderBuyPremium", EmitDefaultValue=false)]
        public long? OpenOrderBuyPremium { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderSellQty
        /// </summary>
        [DataMember(Name="openOrderSellQty", EmitDefaultValue=false)]
        public long? OpenOrderSellQty { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderSellCost
        /// </summary>
        [DataMember(Name="openOrderSellCost", EmitDefaultValue=false)]
        public long? OpenOrderSellCost { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrderSellPremium
        /// </summary>
        [DataMember(Name="openOrderSellPremium", EmitDefaultValue=false)]
        public long? OpenOrderSellPremium { get; set; }

        /// <summary>
        /// Gets or Sets CurrentQty
        /// </summary>
        [DataMember(Name="currentQty", EmitDefaultValue=false)]
        public long? CurrentQty { get; set; }

        /// <summary>
        /// Gets or Sets CurrentCost
        /// </summary>
        [DataMember(Name="currentCost", EmitDefaultValue=false)]
        public long? CurrentCost { get; set; }

        /// <summary>
        /// Gets or Sets CurrentComm
        /// </summary>
        [DataMember(Name="currentComm", EmitDefaultValue=false)]
        public long? CurrentComm { get; set; }

        /// <summary>
        /// Gets or Sets RealisedCost
        /// </summary>
        [DataMember(Name="realisedCost", EmitDefaultValue=false)]
        public long? RealisedCost { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedCost
        /// </summary>
        [DataMember(Name="unrealisedCost", EmitDefaultValue=false)]
        public long? UnrealisedCost { get; set; }

        /// <summary>
        /// Gets or Sets GrossOpenPremium
        /// </summary>
        [DataMember(Name="grossOpenPremium", EmitDefaultValue=false)]
        public long? GrossOpenPremium { get; set; }

        /// <summary>
        /// Gets or Sets IsOpen
        /// </summary>
        [DataMember(Name="isOpen", EmitDefaultValue=false)]
        public bool? IsOpen { get; set; }

        /// <summary>
        /// Gets or Sets MarkPrice
        /// </summary>
        [DataMember(Name="markPrice", EmitDefaultValue=false)]
        public double? MarkPrice { get; set; }

        /// <summary>
        /// Gets or Sets MarkValue
        /// </summary>
        [DataMember(Name="markValue", EmitDefaultValue=false)]
        public long? MarkValue { get; set; }

        /// <summary>
        /// Gets or Sets RiskValue
        /// </summary>
        [DataMember(Name="riskValue", EmitDefaultValue=false)]
        public long? RiskValue { get; set; }

        /// <summary>
        /// Gets or Sets HomeNotional
        /// </summary>
        [DataMember(Name="homeNotional", EmitDefaultValue=false)]
        public double? HomeNotional { get; set; }

        /// <summary>
        /// Gets or Sets ForeignNotional
        /// </summary>
        [DataMember(Name="foreignNotional", EmitDefaultValue=false)]
        public double? ForeignNotional { get; set; }

        /// <summary>
        /// Gets or Sets PosState
        /// </summary>
        [DataMember(Name="posState", EmitDefaultValue=false)]
        public string PosState { get; set; }

        /// <summary>
        /// Gets or Sets PosCost
        /// </summary>
        [DataMember(Name="posCost", EmitDefaultValue=false)]
        public long? PosCost { get; set; }

        /// <summary>
        /// Gets or Sets PosCross
        /// </summary>
        [DataMember(Name="posCross", EmitDefaultValue=false)]
        public long? PosCross { get; set; }

        /// <summary>
        /// Gets or Sets PosComm
        /// </summary>
        [DataMember(Name="posComm", EmitDefaultValue=false)]
        public long? PosComm { get; set; }

        /// <summary>
        /// Gets or Sets PosLoss
        /// </summary>
        [DataMember(Name="posLoss", EmitDefaultValue=false)]
        public long? PosLoss { get; set; }

        /// <summary>
        /// Gets or Sets PosMargin
        /// </summary>
        [DataMember(Name="posMargin", EmitDefaultValue=false)]
        public long? PosMargin { get; set; }

        /// <summary>
        /// Gets or Sets PosMaint
        /// </summary>
        [DataMember(Name="posMaint", EmitDefaultValue=false)]
        public long? PosMaint { get; set; }

        /// <summary>
        /// Gets or Sets InitMargin
        /// </summary>
        [DataMember(Name="initMargin", EmitDefaultValue=false)]
        public long? InitMargin { get; set; }

        /// <summary>
        /// Gets or Sets MaintMargin
        /// </summary>
        [DataMember(Name="maintMargin", EmitDefaultValue=false)]
        public long? MaintMargin { get; set; }

        /// <summary>
        /// Gets or Sets RealisedPnl
        /// </summary>
        [DataMember(Name="realisedPnl", EmitDefaultValue=false)]
        public long? RealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedPnl
        /// </summary>
        [DataMember(Name="unrealisedPnl", EmitDefaultValue=false)]
        public long? UnrealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedPnlPcnt
        /// </summary>
        [DataMember(Name="unrealisedPnlPcnt", EmitDefaultValue=false)]
        public double? UnrealisedPnlPcnt { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedRoePcnt
        /// </summary>
        [DataMember(Name="unrealisedRoePcnt", EmitDefaultValue=false)]
        public double? UnrealisedRoePcnt { get; set; }

        /// <summary>
        /// Gets or Sets AvgCostPrice
        /// </summary>
        [DataMember(Name="avgCostPrice", EmitDefaultValue=false)]
        public double? AvgCostPrice { get; set; }

        /// <summary>
        /// Gets or Sets AvgEntryPrice
        /// </summary>
        [DataMember(Name="avgEntryPrice", EmitDefaultValue=false)]
        public double? AvgEntryPrice { get; set; }

        /// <summary>
        /// Gets or Sets BreakEvenPrice
        /// </summary>
        [DataMember(Name="breakEvenPrice", EmitDefaultValue=false)]
        public double? BreakEvenPrice { get; set; }

        /// <summary>
        /// Gets or Sets MarginCallPrice
        /// </summary>
        [DataMember(Name="marginCallPrice", EmitDefaultValue=false)]
        public double? MarginCallPrice { get; set; }

        /// <summary>
        /// Gets or Sets LiquidationPrice
        /// </summary>
        [DataMember(Name="liquidationPrice", EmitDefaultValue=false)]
        public double? LiquidationPrice { get; set; }

        /// <summary>
        /// Gets or Sets BankruptPrice
        /// </summary>
        [DataMember(Name="bankruptPrice", EmitDefaultValue=false)]
        public double? BankruptPrice { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Position {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("  QuoteCurrency: ").Append(QuoteCurrency).Append("\n");
            sb.Append("  Commission: ").Append(Commission).Append("\n");
            sb.Append("  InitMarginReq: ").Append(InitMarginReq).Append("\n");
            sb.Append("  MaintMarginReq: ").Append(MaintMarginReq).Append("\n");
            sb.Append("  RiskLimit: ").Append(RiskLimit).Append("\n");
            sb.Append("  Leverage: ").Append(Leverage).Append("\n");
            sb.Append("  CrossMargin: ").Append(CrossMargin).Append("\n");
            sb.Append("  DeleveragePercentile: ").Append(DeleveragePercentile).Append("\n");
            sb.Append("  RebalancedPnl: ").Append(RebalancedPnl).Append("\n");
            sb.Append("  PrevRealisedPnl: ").Append(PrevRealisedPnl).Append("\n");
            sb.Append("  PrevUnrealisedPnl: ").Append(PrevUnrealisedPnl).Append("\n");
            sb.Append("  OpeningQty: ").Append(OpeningQty).Append("\n");
            sb.Append("  OpenOrderBuyQty: ").Append(OpenOrderBuyQty).Append("\n");
            sb.Append("  OpenOrderBuyCost: ").Append(OpenOrderBuyCost).Append("\n");
            sb.Append("  OpenOrderBuyPremium: ").Append(OpenOrderBuyPremium).Append("\n");
            sb.Append("  OpenOrderSellQty: ").Append(OpenOrderSellQty).Append("\n");
            sb.Append("  OpenOrderSellCost: ").Append(OpenOrderSellCost).Append("\n");
            sb.Append("  OpenOrderSellPremium: ").Append(OpenOrderSellPremium).Append("\n");
            sb.Append("  CurrentQty: ").Append(CurrentQty).Append("\n");
            sb.Append("  CurrentCost: ").Append(CurrentCost).Append("\n");
            sb.Append("  CurrentComm: ").Append(CurrentComm).Append("\n");
            sb.Append("  RealisedCost: ").Append(RealisedCost).Append("\n");
            sb.Append("  UnrealisedCost: ").Append(UnrealisedCost).Append("\n");
            sb.Append("  GrossOpenPremium: ").Append(GrossOpenPremium).Append("\n");
            sb.Append("  IsOpen: ").Append(IsOpen).Append("\n");
            sb.Append("  MarkPrice: ").Append(MarkPrice).Append("\n");
            sb.Append("  MarkValue: ").Append(MarkValue).Append("\n");
            sb.Append("  RiskValue: ").Append(RiskValue).Append("\n");
            sb.Append("  HomeNotional: ").Append(HomeNotional).Append("\n");
            sb.Append("  ForeignNotional: ").Append(ForeignNotional).Append("\n");
            sb.Append("  PosState: ").Append(PosState).Append("\n");
            sb.Append("  PosCost: ").Append(PosCost).Append("\n");
            sb.Append("  PosCross: ").Append(PosCross).Append("\n");
            sb.Append("  PosComm: ").Append(PosComm).Append("\n");
            sb.Append("  PosLoss: ").Append(PosLoss).Append("\n");
            sb.Append("  PosMargin: ").Append(PosMargin).Append("\n");
            sb.Append("  PosMaint: ").Append(PosMaint).Append("\n");
            sb.Append("  InitMargin: ").Append(InitMargin).Append("\n");
            sb.Append("  MaintMargin: ").Append(MaintMargin).Append("\n");
            sb.Append("  RealisedPnl: ").Append(RealisedPnl).Append("\n");
            sb.Append("  UnrealisedPnl: ").Append(UnrealisedPnl).Append("\n");
            sb.Append("  UnrealisedPnlPcnt: ").Append(UnrealisedPnlPcnt).Append("\n");
            sb.Append("  UnrealisedRoePcnt: ").Append(UnrealisedRoePcnt).Append("\n");
            sb.Append("  AvgCostPrice: ").Append(AvgCostPrice).Append("\n");
            sb.Append("  AvgEntryPrice: ").Append(AvgEntryPrice).Append("\n");
            sb.Append("  BreakEvenPrice: ").Append(BreakEvenPrice).Append("\n");
            sb.Append("  MarginCallPrice: ").Append(MarginCallPrice).Append("\n");
            sb.Append("  LiquidationPrice: ").Append(LiquidationPrice).Append("\n");
            sb.Append("  BankruptPrice: ").Append(BankruptPrice).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Position);
        }

        /// <summary>
        /// Returns true if Position instances are equal
        /// </summary>
        /// <param name="input">Instance of Position to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Position input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                ) && 
                (
                    this.QuoteCurrency == input.QuoteCurrency ||
                    (this.QuoteCurrency != null &&
                    this.QuoteCurrency.Equals(input.QuoteCurrency))
                ) && 
                (
                    this.Commission == input.Commission ||
                    (this.Commission != null &&
                    this.Commission.Equals(input.Commission))
                ) && 
                (
                    this.InitMarginReq == input.InitMarginReq ||
                    (this.InitMarginReq != null &&
                    this.InitMarginReq.Equals(input.InitMarginReq))
                ) && 
                (
                    this.MaintMarginReq == input.MaintMarginReq ||
                    (this.MaintMarginReq != null &&
                    this.MaintMarginReq.Equals(input.MaintMarginReq))
                ) && 
                (
                    this.RiskLimit == input.RiskLimit ||
                    (this.RiskLimit != null &&
                    this.RiskLimit.Equals(input.RiskLimit))
                ) && 
                (
                    this.Leverage == input.Leverage ||
                    (this.Leverage != null &&
                    this.Leverage.Equals(input.Leverage))
                ) && 
                (
                    this.CrossMargin == input.CrossMargin ||
                    (this.CrossMargin != null &&
                    this.CrossMargin.Equals(input.CrossMargin))
                ) && 
                (
                    this.DeleveragePercentile == input.DeleveragePercentile ||
                    (this.DeleveragePercentile != null &&
                    this.DeleveragePercentile.Equals(input.DeleveragePercentile))
                ) && 
                (
                    this.RebalancedPnl == input.RebalancedPnl ||
                    (this.RebalancedPnl != null &&
                    this.RebalancedPnl.Equals(input.RebalancedPnl))
                ) && 
                (
                    this.PrevRealisedPnl == input.PrevRealisedPnl ||
                    (this.PrevRealisedPnl != null &&
                    this.PrevRealisedPnl.Equals(input.PrevRealisedPnl))
                ) && 
                (
                    this.PrevUnrealisedPnl == input.PrevUnrealisedPnl ||
                    (this.PrevUnrealisedPnl != null &&
                    this.PrevUnrealisedPnl.Equals(input.PrevUnrealisedPnl))
                ) && 
                (
                    this.OpeningQty == input.OpeningQty ||
                    (this.OpeningQty != null &&
                    this.OpeningQty.Equals(input.OpeningQty))
                ) && 
                (
                    this.OpenOrderBuyQty == input.OpenOrderBuyQty ||
                    (this.OpenOrderBuyQty != null &&
                    this.OpenOrderBuyQty.Equals(input.OpenOrderBuyQty))
                ) && 
                (
                    this.OpenOrderBuyCost == input.OpenOrderBuyCost ||
                    (this.OpenOrderBuyCost != null &&
                    this.OpenOrderBuyCost.Equals(input.OpenOrderBuyCost))
                ) && 
                (
                    this.OpenOrderBuyPremium == input.OpenOrderBuyPremium ||
                    (this.OpenOrderBuyPremium != null &&
                    this.OpenOrderBuyPremium.Equals(input.OpenOrderBuyPremium))
                ) && 
                (
                    this.OpenOrderSellQty == input.OpenOrderSellQty ||
                    (this.OpenOrderSellQty != null &&
                    this.OpenOrderSellQty.Equals(input.OpenOrderSellQty))
                ) && 
                (
                    this.OpenOrderSellCost == input.OpenOrderSellCost ||
                    (this.OpenOrderSellCost != null &&
                    this.OpenOrderSellCost.Equals(input.OpenOrderSellCost))
                ) && 
                (
                    this.OpenOrderSellPremium == input.OpenOrderSellPremium ||
                    (this.OpenOrderSellPremium != null &&
                    this.OpenOrderSellPremium.Equals(input.OpenOrderSellPremium))
                ) && 
                (
                    this.CurrentQty == input.CurrentQty ||
                    (this.CurrentQty != null &&
                    this.CurrentQty.Equals(input.CurrentQty))
                ) && 
                (
                    this.CurrentCost == input.CurrentCost ||
                    (this.CurrentCost != null &&
                    this.CurrentCost.Equals(input.CurrentCost))
                ) && 
                (
                    this.CurrentComm == input.CurrentComm ||
                    (this.CurrentComm != null &&
                    this.CurrentComm.Equals(input.CurrentComm))
                ) && 
                (
                    this.RealisedCost == input.RealisedCost ||
                    (this.RealisedCost != null &&
                    this.RealisedCost.Equals(input.RealisedCost))
                ) && 
                (
                    this.UnrealisedCost == input.UnrealisedCost ||
                    (this.UnrealisedCost != null &&
                    this.UnrealisedCost.Equals(input.UnrealisedCost))
                ) && 
                (
                    this.GrossOpenPremium == input.GrossOpenPremium ||
                    (this.GrossOpenPremium != null &&
                    this.GrossOpenPremium.Equals(input.GrossOpenPremium))
                ) && 
                (
                    this.IsOpen == input.IsOpen ||
                    (this.IsOpen != null &&
                    this.IsOpen.Equals(input.IsOpen))
                ) && 
                (
                    this.MarkPrice == input.MarkPrice ||
                    (this.MarkPrice != null &&
                    this.MarkPrice.Equals(input.MarkPrice))
                ) && 
                (
                    this.MarkValue == input.MarkValue ||
                    (this.MarkValue != null &&
                    this.MarkValue.Equals(input.MarkValue))
                ) && 
                (
                    this.RiskValue == input.RiskValue ||
                    (this.RiskValue != null &&
                    this.RiskValue.Equals(input.RiskValue))
                ) && 
                (
                    this.HomeNotional == input.HomeNotional ||
                    (this.HomeNotional != null &&
                    this.HomeNotional.Equals(input.HomeNotional))
                ) && 
                (
                    this.ForeignNotional == input.ForeignNotional ||
                    (this.ForeignNotional != null &&
                    this.ForeignNotional.Equals(input.ForeignNotional))
                ) && 
                (
                    this.PosState == input.PosState ||
                    (this.PosState != null &&
                    this.PosState.Equals(input.PosState))
                ) && 
                (
                    this.PosCost == input.PosCost ||
                    (this.PosCost != null &&
                    this.PosCost.Equals(input.PosCost))
                ) && 
                (
                    this.PosCross == input.PosCross ||
                    (this.PosCross != null &&
                    this.PosCross.Equals(input.PosCross))
                ) && 
                (
                    this.PosComm == input.PosComm ||
                    (this.PosComm != null &&
                    this.PosComm.Equals(input.PosComm))
                ) && 
                (
                    this.PosLoss == input.PosLoss ||
                    (this.PosLoss != null &&
                    this.PosLoss.Equals(input.PosLoss))
                ) && 
                (
                    this.PosMargin == input.PosMargin ||
                    (this.PosMargin != null &&
                    this.PosMargin.Equals(input.PosMargin))
                ) && 
                (
                    this.PosMaint == input.PosMaint ||
                    (this.PosMaint != null &&
                    this.PosMaint.Equals(input.PosMaint))
                ) && 
                (
                    this.InitMargin == input.InitMargin ||
                    (this.InitMargin != null &&
                    this.InitMargin.Equals(input.InitMargin))
                ) && 
                (
                    this.MaintMargin == input.MaintMargin ||
                    (this.MaintMargin != null &&
                    this.MaintMargin.Equals(input.MaintMargin))
                ) && 
                (
                    this.RealisedPnl == input.RealisedPnl ||
                    (this.RealisedPnl != null &&
                    this.RealisedPnl.Equals(input.RealisedPnl))
                ) && 
                (
                    this.UnrealisedPnl == input.UnrealisedPnl ||
                    (this.UnrealisedPnl != null &&
                    this.UnrealisedPnl.Equals(input.UnrealisedPnl))
                ) && 
                (
                    this.UnrealisedPnlPcnt == input.UnrealisedPnlPcnt ||
                    (this.UnrealisedPnlPcnt != null &&
                    this.UnrealisedPnlPcnt.Equals(input.UnrealisedPnlPcnt))
                ) && 
                (
                    this.UnrealisedRoePcnt == input.UnrealisedRoePcnt ||
                    (this.UnrealisedRoePcnt != null &&
                    this.UnrealisedRoePcnt.Equals(input.UnrealisedRoePcnt))
                ) && 
                (
                    this.AvgCostPrice == input.AvgCostPrice ||
                    (this.AvgCostPrice != null &&
                    this.AvgCostPrice.Equals(input.AvgCostPrice))
                ) && 
                (
                    this.AvgEntryPrice == input.AvgEntryPrice ||
                    (this.AvgEntryPrice != null &&
                    this.AvgEntryPrice.Equals(input.AvgEntryPrice))
                ) && 
                (
                    this.BreakEvenPrice == input.BreakEvenPrice ||
                    (this.BreakEvenPrice != null &&
                    this.BreakEvenPrice.Equals(input.BreakEvenPrice))
                ) && 
                (
                    this.MarginCallPrice == input.MarginCallPrice ||
                    (this.MarginCallPrice != null &&
                    this.MarginCallPrice.Equals(input.MarginCallPrice))
                ) && 
                (
                    this.LiquidationPrice == input.LiquidationPrice ||
                    (this.LiquidationPrice != null &&
                    this.LiquidationPrice.Equals(input.LiquidationPrice))
                ) && 
                (
                    this.BankruptPrice == input.BankruptPrice ||
                    (this.BankruptPrice != null &&
                    this.BankruptPrice.Equals(input.BankruptPrice))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Underlying != null)
                    hashCode = hashCode * 59 + this.Underlying.GetHashCode();
                if (this.QuoteCurrency != null)
                    hashCode = hashCode * 59 + this.QuoteCurrency.GetHashCode();
                if (this.Commission != null)
                    hashCode = hashCode * 59 + this.Commission.GetHashCode();
                if (this.InitMarginReq != null)
                    hashCode = hashCode * 59 + this.InitMarginReq.GetHashCode();
                if (this.MaintMarginReq != null)
                    hashCode = hashCode * 59 + this.MaintMarginReq.GetHashCode();
                if (this.RiskLimit != null)
                    hashCode = hashCode * 59 + this.RiskLimit.GetHashCode();
                if (this.Leverage != null)
                    hashCode = hashCode * 59 + this.Leverage.GetHashCode();
                if (this.CrossMargin != null)
                    hashCode = hashCode * 59 + this.CrossMargin.GetHashCode();
                if (this.DeleveragePercentile != null)
                    hashCode = hashCode * 59 + this.DeleveragePercentile.GetHashCode();
                if (this.RebalancedPnl != null)
                    hashCode = hashCode * 59 + this.RebalancedPnl.GetHashCode();
                if (this.PrevRealisedPnl != null)
                    hashCode = hashCode * 59 + this.PrevRealisedPnl.GetHashCode();
                if (this.PrevUnrealisedPnl != null)
                    hashCode = hashCode * 59 + this.PrevUnrealisedPnl.GetHashCode();
                if (this.OpeningQty != null)
                    hashCode = hashCode * 59 + this.OpeningQty.GetHashCode();
                if (this.OpenOrderBuyQty != null)
                    hashCode = hashCode * 59 + this.OpenOrderBuyQty.GetHashCode();
                if (this.OpenOrderBuyCost != null)
                    hashCode = hashCode * 59 + this.OpenOrderBuyCost.GetHashCode();
                if (this.OpenOrderBuyPremium != null)
                    hashCode = hashCode * 59 + this.OpenOrderBuyPremium.GetHashCode();
                if (this.OpenOrderSellQty != null)
                    hashCode = hashCode * 59 + this.OpenOrderSellQty.GetHashCode();
                if (this.OpenOrderSellCost != null)
                    hashCode = hashCode * 59 + this.OpenOrderSellCost.GetHashCode();
                if (this.OpenOrderSellPremium != null)
                    hashCode = hashCode * 59 + this.OpenOrderSellPremium.GetHashCode();
                if (this.CurrentQty != null)
                    hashCode = hashCode * 59 + this.CurrentQty.GetHashCode();
                if (this.CurrentCost != null)
                    hashCode = hashCode * 59 + this.CurrentCost.GetHashCode();
                if (this.CurrentComm != null)
                    hashCode = hashCode * 59 + this.CurrentComm.GetHashCode();
                if (this.RealisedCost != null)
                    hashCode = hashCode * 59 + this.RealisedCost.GetHashCode();
                if (this.UnrealisedCost != null)
                    hashCode = hashCode * 59 + this.UnrealisedCost.GetHashCode();
                if (this.GrossOpenPremium != null)
                    hashCode = hashCode * 59 + this.GrossOpenPremium.GetHashCode();
                if (this.IsOpen != null)
                    hashCode = hashCode * 59 + this.IsOpen.GetHashCode();
                if (this.MarkPrice != null)
                    hashCode = hashCode * 59 + this.MarkPrice.GetHashCode();
                if (this.MarkValue != null)
                    hashCode = hashCode * 59 + this.MarkValue.GetHashCode();
                if (this.RiskValue != null)
                    hashCode = hashCode * 59 + this.RiskValue.GetHashCode();
                if (this.HomeNotional != null)
                    hashCode = hashCode * 59 + this.HomeNotional.GetHashCode();
                if (this.ForeignNotional != null)
                    hashCode = hashCode * 59 + this.ForeignNotional.GetHashCode();
                if (this.PosState != null)
                    hashCode = hashCode * 59 + this.PosState.GetHashCode();
                if (this.PosCost != null)
                    hashCode = hashCode * 59 + this.PosCost.GetHashCode();
                if (this.PosCross != null)
                    hashCode = hashCode * 59 + this.PosCross.GetHashCode();
                if (this.PosComm != null)
                    hashCode = hashCode * 59 + this.PosComm.GetHashCode();
                if (this.PosLoss != null)
                    hashCode = hashCode * 59 + this.PosLoss.GetHashCode();
                if (this.PosMargin != null)
                    hashCode = hashCode * 59 + this.PosMargin.GetHashCode();
                if (this.PosMaint != null)
                    hashCode = hashCode * 59 + this.PosMaint.GetHashCode();
                if (this.InitMargin != null)
                    hashCode = hashCode * 59 + this.InitMargin.GetHashCode();
                if (this.MaintMargin != null)
                    hashCode = hashCode * 59 + this.MaintMargin.GetHashCode();
                if (this.RealisedPnl != null)
                    hashCode = hashCode * 59 + this.RealisedPnl.GetHashCode();
                if (this.UnrealisedPnl != null)
                    hashCode = hashCode * 59 + this.UnrealisedPnl.GetHashCode();
                if (this.UnrealisedPnlPcnt != null)
                    hashCode = hashCode * 59 + this.UnrealisedPnlPcnt.GetHashCode();
                if (this.UnrealisedRoePcnt != null)
                    hashCode = hashCode * 59 + this.UnrealisedRoePcnt.GetHashCode();
                if (this.AvgCostPrice != null)
                    hashCode = hashCode * 59 + this.AvgCostPrice.GetHashCode();
                if (this.AvgEntryPrice != null)
                    hashCode = hashCode * 59 + this.AvgEntryPrice.GetHashCode();
                if (this.BreakEvenPrice != null)
                    hashCode = hashCode * 59 + this.BreakEvenPrice.GetHashCode();
                if (this.MarginCallPrice != null)
                    hashCode = hashCode * 59 + this.MarginCallPrice.GetHashCode();
                if (this.LiquidationPrice != null)
                    hashCode = hashCode * 59 + this.LiquidationPrice.GetHashCode();
                if (this.BankruptPrice != null)
                    hashCode = hashCode * 59 + this.BankruptPrice.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
