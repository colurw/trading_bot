//
// Position.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Summary of Open and Closed Positions */

public struct Position: Codable {

    public var account: Int64
    public var symbol: String
    public var currency: String?
    public var underlying: String?
    public var quoteCurrency: String?
    public var commission: Double?
    public var initMarginReq: Double?
    public var maintMarginReq: Double?
    public var riskLimit: Int64?
    public var leverage: Double?
    public var crossMargin: Bool?
    public var deleveragePercentile: Double?
    public var rebalancedPnl: Int64?
    public var prevRealisedPnl: Int64?
    public var prevUnrealisedPnl: Int64?
    public var openingQty: Int64?
    public var openOrderBuyQty: Int64?
    public var openOrderBuyCost: Int64?
    public var openOrderBuyPremium: Int64?
    public var openOrderSellQty: Int64?
    public var openOrderSellCost: Int64?
    public var openOrderSellPremium: Int64?
    public var currentQty: Int64?
    public var currentCost: Int64?
    public var currentComm: Int64?
    public var realisedCost: Int64?
    public var unrealisedCost: Int64?
    public var grossOpenPremium: Int64?
    public var isOpen: Bool?
    public var markPrice: Double?
    public var markValue: Int64?
    public var riskValue: Int64?
    public var homeNotional: Double?
    public var foreignNotional: Double?
    public var posState: String?
    public var posCost: Int64?
    public var posCross: Int64?
    public var posComm: Int64?
    public var posLoss: Int64?
    public var posMargin: Int64?
    public var posMaint: Int64?
    public var initMargin: Int64?
    public var maintMargin: Int64?
    public var realisedPnl: Int64?
    public var unrealisedPnl: Int64?
    public var unrealisedPnlPcnt: Double?
    public var unrealisedRoePcnt: Double?
    public var avgCostPrice: Double?
    public var avgEntryPrice: Double?
    public var breakEvenPrice: Double?
    public var marginCallPrice: Double?
    public var liquidationPrice: Double?
    public var bankruptPrice: Double?
    public var timestamp: Date?

    public init(account: Int64, symbol: String, currency: String?, underlying: String?, quoteCurrency: String?, commission: Double?, initMarginReq: Double?, maintMarginReq: Double?, riskLimit: Int64?, leverage: Double?, crossMargin: Bool?, deleveragePercentile: Double?, rebalancedPnl: Int64?, prevRealisedPnl: Int64?, prevUnrealisedPnl: Int64?, openingQty: Int64?, openOrderBuyQty: Int64?, openOrderBuyCost: Int64?, openOrderBuyPremium: Int64?, openOrderSellQty: Int64?, openOrderSellCost: Int64?, openOrderSellPremium: Int64?, currentQty: Int64?, currentCost: Int64?, currentComm: Int64?, realisedCost: Int64?, unrealisedCost: Int64?, grossOpenPremium: Int64?, isOpen: Bool?, markPrice: Double?, markValue: Int64?, riskValue: Int64?, homeNotional: Double?, foreignNotional: Double?, posState: String?, posCost: Int64?, posCross: Int64?, posComm: Int64?, posLoss: Int64?, posMargin: Int64?, posMaint: Int64?, initMargin: Int64?, maintMargin: Int64?, realisedPnl: Int64?, unrealisedPnl: Int64?, unrealisedPnlPcnt: Double?, unrealisedRoePcnt: Double?, avgCostPrice: Double?, avgEntryPrice: Double?, breakEvenPrice: Double?, marginCallPrice: Double?, liquidationPrice: Double?, bankruptPrice: Double?, timestamp: Date?) {
        self.account = account
        self.symbol = symbol
        self.currency = currency
        self.underlying = underlying
        self.quoteCurrency = quoteCurrency
        self.commission = commission
        self.initMarginReq = initMarginReq
        self.maintMarginReq = maintMarginReq
        self.riskLimit = riskLimit
        self.leverage = leverage
        self.crossMargin = crossMargin
        self.deleveragePercentile = deleveragePercentile
        self.rebalancedPnl = rebalancedPnl
        self.prevRealisedPnl = prevRealisedPnl
        self.prevUnrealisedPnl = prevUnrealisedPnl
        self.openingQty = openingQty
        self.openOrderBuyQty = openOrderBuyQty
        self.openOrderBuyCost = openOrderBuyCost
        self.openOrderBuyPremium = openOrderBuyPremium
        self.openOrderSellQty = openOrderSellQty
        self.openOrderSellCost = openOrderSellCost
        self.openOrderSellPremium = openOrderSellPremium
        self.currentQty = currentQty
        self.currentCost = currentCost
        self.currentComm = currentComm
        self.realisedCost = realisedCost
        self.unrealisedCost = unrealisedCost
        self.grossOpenPremium = grossOpenPremium
        self.isOpen = isOpen
        self.markPrice = markPrice
        self.markValue = markValue
        self.riskValue = riskValue
        self.homeNotional = homeNotional
        self.foreignNotional = foreignNotional
        self.posState = posState
        self.posCost = posCost
        self.posCross = posCross
        self.posComm = posComm
        self.posLoss = posLoss
        self.posMargin = posMargin
        self.posMaint = posMaint
        self.initMargin = initMargin
        self.maintMargin = maintMargin
        self.realisedPnl = realisedPnl
        self.unrealisedPnl = unrealisedPnl
        self.unrealisedPnlPcnt = unrealisedPnlPcnt
        self.unrealisedRoePcnt = unrealisedRoePcnt
        self.avgCostPrice = avgCostPrice
        self.avgEntryPrice = avgEntryPrice
        self.breakEvenPrice = breakEvenPrice
        self.marginCallPrice = marginCallPrice
        self.liquidationPrice = liquidationPrice
        self.bankruptPrice = bankruptPrice
        self.timestamp = timestamp
    }


}

