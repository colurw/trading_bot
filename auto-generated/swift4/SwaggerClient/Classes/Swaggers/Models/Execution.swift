//
// Execution.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Raw Order and Balance Data */

public struct Execution: Codable {

    public var execID: String?
    public var orderID: String?
    public var clOrdID: String?
    public var clOrdLinkID: String?
    public var account: Int64?
    public var symbol: String
    public var side: String?
    public var lastQty: Int64?
    public var lastPx: Double?
    public var lastLiquidityInd: String?
    public var orderQty: Int64?
    public var price: Double?
    public var displayQty: Int64?
    public var stopPx: Double?
    public var pegOffsetValue: Double?
    public var pegPriceType: String?
    public var currency: String?
    public var settlCurrency: String?
    public var execType: String?
    public var ordType: String?
    public var timeInForce: String?
    public var execInst: String?
    public var contingencyType: String?
    public var ordStatus: String?
    public var triggered: String?
    public var workingIndicator: Bool?
    public var ordRejReason: String?
    public var leavesQty: Int64?
    public var cumQty: Int64?
    public var avgPx: Double?
    public var commission: Double?
    public var feeType: String?
    public var tradePublishIndicator: String?
    public var text: String?
    public var trdMatchID: String?
    public var execCost: Int64?
    public var execComm: Int64?
    public var homeNotional: Double?
    public var foreignNotional: Double?
    public var transactTime: Date?
    public var timestamp: Date

    public init(execID: String?, orderID: String?, clOrdID: String?, clOrdLinkID: String?, account: Int64?, symbol: String, side: String?, lastQty: Int64?, lastPx: Double?, lastLiquidityInd: String?, orderQty: Int64?, price: Double?, displayQty: Int64?, stopPx: Double?, pegOffsetValue: Double?, pegPriceType: String?, currency: String?, settlCurrency: String?, execType: String?, ordType: String?, timeInForce: String?, execInst: String?, contingencyType: String?, ordStatus: String?, triggered: String?, workingIndicator: Bool?, ordRejReason: String?, leavesQty: Int64?, cumQty: Int64?, avgPx: Double?, commission: Double?, feeType: String?, tradePublishIndicator: String?, text: String?, trdMatchID: String?, execCost: Int64?, execComm: Int64?, homeNotional: Double?, foreignNotional: Double?, transactTime: Date?, timestamp: Date) {
        self.execID = execID
        self.orderID = orderID
        self.clOrdID = clOrdID
        self.clOrdLinkID = clOrdLinkID
        self.account = account
        self.symbol = symbol
        self.side = side
        self.lastQty = lastQty
        self.lastPx = lastPx
        self.lastLiquidityInd = lastLiquidityInd
        self.orderQty = orderQty
        self.price = price
        self.displayQty = displayQty
        self.stopPx = stopPx
        self.pegOffsetValue = pegOffsetValue
        self.pegPriceType = pegPriceType
        self.currency = currency
        self.settlCurrency = settlCurrency
        self.execType = execType
        self.ordType = ordType
        self.timeInForce = timeInForce
        self.execInst = execInst
        self.contingencyType = contingencyType
        self.ordStatus = ordStatus
        self.triggered = triggered
        self.workingIndicator = workingIndicator
        self.ordRejReason = ordRejReason
        self.leavesQty = leavesQty
        self.cumQty = cumQty
        self.avgPx = avgPx
        self.commission = commission
        self.feeType = feeType
        self.tradePublishIndicator = tradePublishIndicator
        self.text = text
        self.trdMatchID = trdMatchID
        self.execCost = execCost
        self.execComm = execComm
        self.homeNotional = homeNotional
        self.foreignNotional = foreignNotional
        self.transactTime = transactTime
        self.timestamp = timestamp
    }


}

