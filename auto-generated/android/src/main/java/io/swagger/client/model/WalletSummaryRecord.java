/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class WalletSummaryRecord {
  
  @SerializedName("account")
  private Double account = null;
  @SerializedName("currency")
  private String currency = null;
  @SerializedName("transactType")
  private String transactType = null;
  @SerializedName("symbol")
  private String symbol = null;
  @SerializedName("amount")
  private Double amount = 0.0;
  @SerializedName("pendingDebit")
  private Double pendingDebit = 0.0;
  @SerializedName("realisedPnl")
  private Double realisedPnl = 0.0;
  @SerializedName("walletBalance")
  private Double walletBalance = 0.0;
  @SerializedName("unrealisedPnl")
  private Double unrealisedPnl = 0.0;
  @SerializedName("marginBalance")
  private Double marginBalance = 0.0;

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public Double getAccount() {
    return account;
  }
  public void setAccount(Double account) {
    this.account = account;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getCurrency() {
    return currency;
  }
  public void setCurrency(String currency) {
    this.currency = currency;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getTransactType() {
    return transactType;
  }
  public void setTransactType(String transactType) {
    this.transactType = transactType;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getSymbol() {
    return symbol;
  }
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getAmount() {
    return amount;
  }
  public void setAmount(Double amount) {
    this.amount = amount;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getPendingDebit() {
    return pendingDebit;
  }
  public void setPendingDebit(Double pendingDebit) {
    this.pendingDebit = pendingDebit;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getRealisedPnl() {
    return realisedPnl;
  }
  public void setRealisedPnl(Double realisedPnl) {
    this.realisedPnl = realisedPnl;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getWalletBalance() {
    return walletBalance;
  }
  public void setWalletBalance(Double walletBalance) {
    this.walletBalance = walletBalance;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getUnrealisedPnl() {
    return unrealisedPnl;
  }
  public void setUnrealisedPnl(Double unrealisedPnl) {
    this.unrealisedPnl = unrealisedPnl;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Double getMarginBalance() {
    return marginBalance;
  }
  public void setMarginBalance(Double marginBalance) {
    this.marginBalance = marginBalance;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WalletSummaryRecord walletSummaryRecord = (WalletSummaryRecord) o;
    return (this.account == null ? walletSummaryRecord.account == null : this.account.equals(walletSummaryRecord.account)) &&
        (this.currency == null ? walletSummaryRecord.currency == null : this.currency.equals(walletSummaryRecord.currency)) &&
        (this.transactType == null ? walletSummaryRecord.transactType == null : this.transactType.equals(walletSummaryRecord.transactType)) &&
        (this.symbol == null ? walletSummaryRecord.symbol == null : this.symbol.equals(walletSummaryRecord.symbol)) &&
        (this.amount == null ? walletSummaryRecord.amount == null : this.amount.equals(walletSummaryRecord.amount)) &&
        (this.pendingDebit == null ? walletSummaryRecord.pendingDebit == null : this.pendingDebit.equals(walletSummaryRecord.pendingDebit)) &&
        (this.realisedPnl == null ? walletSummaryRecord.realisedPnl == null : this.realisedPnl.equals(walletSummaryRecord.realisedPnl)) &&
        (this.walletBalance == null ? walletSummaryRecord.walletBalance == null : this.walletBalance.equals(walletSummaryRecord.walletBalance)) &&
        (this.unrealisedPnl == null ? walletSummaryRecord.unrealisedPnl == null : this.unrealisedPnl.equals(walletSummaryRecord.unrealisedPnl)) &&
        (this.marginBalance == null ? walletSummaryRecord.marginBalance == null : this.marginBalance.equals(walletSummaryRecord.marginBalance));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.account == null ? 0: this.account.hashCode());
    result = 31 * result + (this.currency == null ? 0: this.currency.hashCode());
    result = 31 * result + (this.transactType == null ? 0: this.transactType.hashCode());
    result = 31 * result + (this.symbol == null ? 0: this.symbol.hashCode());
    result = 31 * result + (this.amount == null ? 0: this.amount.hashCode());
    result = 31 * result + (this.pendingDebit == null ? 0: this.pendingDebit.hashCode());
    result = 31 * result + (this.realisedPnl == null ? 0: this.realisedPnl.hashCode());
    result = 31 * result + (this.walletBalance == null ? 0: this.walletBalance.hashCode());
    result = 31 * result + (this.unrealisedPnl == null ? 0: this.unrealisedPnl.hashCode());
    result = 31 * result + (this.marginBalance == null ? 0: this.marginBalance.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class WalletSummaryRecord {\n");
    
    sb.append("  account: ").append(account).append("\n");
    sb.append("  currency: ").append(currency).append("\n");
    sb.append("  transactType: ").append(transactType).append("\n");
    sb.append("  symbol: ").append(symbol).append("\n");
    sb.append("  amount: ").append(amount).append("\n");
    sb.append("  pendingDebit: ").append(pendingDebit).append("\n");
    sb.append("  realisedPnl: ").append(realisedPnl).append("\n");
    sb.append("  walletBalance: ").append(walletBalance).append("\n");
    sb.append("  unrealisedPnl: ").append(unrealisedPnl).append("\n");
    sb.append("  marginBalance: ").append(marginBalance).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
