# coding: utf-8

"""
    BitMEX API

    ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section.   # noqa: E501

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WalletSummaryRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'float',
        'currency': 'str',
        'transact_type': 'str',
        'symbol': 'str',
        'amount': 'float',
        'pending_debit': 'float',
        'realised_pnl': 'float',
        'wallet_balance': 'float',
        'unrealised_pnl': 'float',
        'margin_balance': 'float'
    }

    attribute_map = {
        'account': 'account',
        'currency': 'currency',
        'transact_type': 'transactType',
        'symbol': 'symbol',
        'amount': 'amount',
        'pending_debit': 'pendingDebit',
        'realised_pnl': 'realisedPnl',
        'wallet_balance': 'walletBalance',
        'unrealised_pnl': 'unrealisedPnl',
        'margin_balance': 'marginBalance'
    }

    def __init__(self, account=None, currency='XBt', transact_type=None, symbol='XBTUSD', amount=0.0, pending_debit=0.0, realised_pnl=0.0, wallet_balance=0.0, unrealised_pnl=0.0, margin_balance=0.0, _configuration=None):  # noqa: E501
        """WalletSummaryRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account = None
        self._currency = None
        self._transact_type = None
        self._symbol = None
        self._amount = None
        self._pending_debit = None
        self._realised_pnl = None
        self._wallet_balance = None
        self._unrealised_pnl = None
        self._margin_balance = None
        self.discriminator = None

        self.account = account
        if currency is not None:
            self.currency = currency
        if transact_type is not None:
            self.transact_type = transact_type
        if symbol is not None:
            self.symbol = symbol
        if amount is not None:
            self.amount = amount
        if pending_debit is not None:
            self.pending_debit = pending_debit
        if realised_pnl is not None:
            self.realised_pnl = realised_pnl
        if wallet_balance is not None:
            self.wallet_balance = wallet_balance
        if unrealised_pnl is not None:
            self.unrealised_pnl = unrealised_pnl
        if margin_balance is not None:
            self.margin_balance = margin_balance

    @property
    def account(self):
        """Gets the account of this WalletSummaryRecord.  # noqa: E501


        :return: The account of this WalletSummaryRecord.  # noqa: E501
        :rtype: float
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this WalletSummaryRecord.


        :param account: The account of this WalletSummaryRecord.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def currency(self):
        """Gets the currency of this WalletSummaryRecord.  # noqa: E501


        :return: The currency of this WalletSummaryRecord.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this WalletSummaryRecord.


        :param currency: The currency of this WalletSummaryRecord.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def transact_type(self):
        """Gets the transact_type of this WalletSummaryRecord.  # noqa: E501


        :return: The transact_type of this WalletSummaryRecord.  # noqa: E501
        :rtype: str
        """
        return self._transact_type

    @transact_type.setter
    def transact_type(self, transact_type):
        """Sets the transact_type of this WalletSummaryRecord.


        :param transact_type: The transact_type of this WalletSummaryRecord.  # noqa: E501
        :type: str
        """

        self._transact_type = transact_type

    @property
    def symbol(self):
        """Gets the symbol of this WalletSummaryRecord.  # noqa: E501


        :return: The symbol of this WalletSummaryRecord.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this WalletSummaryRecord.


        :param symbol: The symbol of this WalletSummaryRecord.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def amount(self):
        """Gets the amount of this WalletSummaryRecord.  # noqa: E501


        :return: The amount of this WalletSummaryRecord.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this WalletSummaryRecord.


        :param amount: The amount of this WalletSummaryRecord.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def pending_debit(self):
        """Gets the pending_debit of this WalletSummaryRecord.  # noqa: E501


        :return: The pending_debit of this WalletSummaryRecord.  # noqa: E501
        :rtype: float
        """
        return self._pending_debit

    @pending_debit.setter
    def pending_debit(self, pending_debit):
        """Sets the pending_debit of this WalletSummaryRecord.


        :param pending_debit: The pending_debit of this WalletSummaryRecord.  # noqa: E501
        :type: float
        """

        self._pending_debit = pending_debit

    @property
    def realised_pnl(self):
        """Gets the realised_pnl of this WalletSummaryRecord.  # noqa: E501


        :return: The realised_pnl of this WalletSummaryRecord.  # noqa: E501
        :rtype: float
        """
        return self._realised_pnl

    @realised_pnl.setter
    def realised_pnl(self, realised_pnl):
        """Sets the realised_pnl of this WalletSummaryRecord.


        :param realised_pnl: The realised_pnl of this WalletSummaryRecord.  # noqa: E501
        :type: float
        """

        self._realised_pnl = realised_pnl

    @property
    def wallet_balance(self):
        """Gets the wallet_balance of this WalletSummaryRecord.  # noqa: E501


        :return: The wallet_balance of this WalletSummaryRecord.  # noqa: E501
        :rtype: float
        """
        return self._wallet_balance

    @wallet_balance.setter
    def wallet_balance(self, wallet_balance):
        """Sets the wallet_balance of this WalletSummaryRecord.


        :param wallet_balance: The wallet_balance of this WalletSummaryRecord.  # noqa: E501
        :type: float
        """

        self._wallet_balance = wallet_balance

    @property
    def unrealised_pnl(self):
        """Gets the unrealised_pnl of this WalletSummaryRecord.  # noqa: E501


        :return: The unrealised_pnl of this WalletSummaryRecord.  # noqa: E501
        :rtype: float
        """
        return self._unrealised_pnl

    @unrealised_pnl.setter
    def unrealised_pnl(self, unrealised_pnl):
        """Sets the unrealised_pnl of this WalletSummaryRecord.


        :param unrealised_pnl: The unrealised_pnl of this WalletSummaryRecord.  # noqa: E501
        :type: float
        """

        self._unrealised_pnl = unrealised_pnl

    @property
    def margin_balance(self):
        """Gets the margin_balance of this WalletSummaryRecord.  # noqa: E501


        :return: The margin_balance of this WalletSummaryRecord.  # noqa: E501
        :rtype: float
        """
        return self._margin_balance

    @margin_balance.setter
    def margin_balance(self, margin_balance):
        """Sets the margin_balance of this WalletSummaryRecord.


        :param margin_balance: The margin_balance of this WalletSummaryRecord.  # noqa: E501
        :type: float
        """

        self._margin_balance = margin_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WalletSummaryRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WalletSummaryRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WalletSummaryRecord):
            return True

        return self.to_dict() != other.to_dict()
