/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGWallet.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGWallet::SWGWallet(QString json) {
    init();
    this->fromJson(json);
}

SWGWallet::SWGWallet() {
    init();
}

SWGWallet::~SWGWallet() {
    this->cleanup();
}

void
SWGWallet::init() {
    account = 0L;
    m_account_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    deposited = 0L;
    m_deposited_isSet = false;
    withdrawn = 0L;
    m_withdrawn_isSet = false;
    transfer_in = 0L;
    m_transfer_in_isSet = false;
    transfer_out = 0L;
    m_transfer_out_isSet = false;
    amount = 0L;
    m_amount_isSet = false;
    pending_credit = 0L;
    m_pending_credit_isSet = false;
    pending_debit = 0L;
    m_pending_debit_isSet = false;
    confirmed_debit = 0L;
    m_confirmed_debit_isSet = false;
    timestamp = NULL;
    m_timestamp_isSet = false;
}

void
SWGWallet::cleanup() {

    if(currency != nullptr) { 
        delete currency;
    }








    if(timestamp != nullptr) { 
        delete timestamp;
    }
}

SWGWallet*
SWGWallet::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGWallet::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&account, pJson["account"], "qint64", "");
    
    ::Swagger::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::Swagger::setValue(&deposited, pJson["deposited"], "qint64", "");
    
    ::Swagger::setValue(&withdrawn, pJson["withdrawn"], "qint64", "");
    
    ::Swagger::setValue(&transfer_in, pJson["transferIn"], "qint64", "");
    
    ::Swagger::setValue(&transfer_out, pJson["transferOut"], "qint64", "");
    
    ::Swagger::setValue(&amount, pJson["amount"], "qint64", "");
    
    ::Swagger::setValue(&pending_credit, pJson["pendingCredit"], "qint64", "");
    
    ::Swagger::setValue(&pending_debit, pJson["pendingDebit"], "qint64", "");
    
    ::Swagger::setValue(&confirmed_debit, pJson["confirmedDebit"], "qint64", "");
    
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "QDateTime", "QDateTime");
    
}

QString
SWGWallet::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGWallet::asJsonObject() {
    QJsonObject obj;
    if(m_account_isSet){
        obj.insert("account", QJsonValue(account));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(m_deposited_isSet){
        obj.insert("deposited", QJsonValue(deposited));
    }
    if(m_withdrawn_isSet){
        obj.insert("withdrawn", QJsonValue(withdrawn));
    }
    if(m_transfer_in_isSet){
        obj.insert("transferIn", QJsonValue(transfer_in));
    }
    if(m_transfer_out_isSet){
        obj.insert("transferOut", QJsonValue(transfer_out));
    }
    if(m_amount_isSet){
        obj.insert("amount", QJsonValue(amount));
    }
    if(m_pending_credit_isSet){
        obj.insert("pendingCredit", QJsonValue(pending_credit));
    }
    if(m_pending_debit_isSet){
        obj.insert("pendingDebit", QJsonValue(pending_debit));
    }
    if(m_confirmed_debit_isSet){
        obj.insert("confirmedDebit", QJsonValue(confirmed_debit));
    }
    if(timestamp != nullptr) { 
        toJsonValue(QString("timestamp"), timestamp, obj, QString("QDateTime"));
    }

    return obj;
}

qint64
SWGWallet::getAccount() {
    return account;
}
void
SWGWallet::setAccount(qint64 account) {
    this->account = account;
    this->m_account_isSet = true;
}

QString*
SWGWallet::getCurrency() {
    return currency;
}
void
SWGWallet::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

qint64
SWGWallet::getDeposited() {
    return deposited;
}
void
SWGWallet::setDeposited(qint64 deposited) {
    this->deposited = deposited;
    this->m_deposited_isSet = true;
}

qint64
SWGWallet::getWithdrawn() {
    return withdrawn;
}
void
SWGWallet::setWithdrawn(qint64 withdrawn) {
    this->withdrawn = withdrawn;
    this->m_withdrawn_isSet = true;
}

qint64
SWGWallet::getTransferIn() {
    return transfer_in;
}
void
SWGWallet::setTransferIn(qint64 transfer_in) {
    this->transfer_in = transfer_in;
    this->m_transfer_in_isSet = true;
}

qint64
SWGWallet::getTransferOut() {
    return transfer_out;
}
void
SWGWallet::setTransferOut(qint64 transfer_out) {
    this->transfer_out = transfer_out;
    this->m_transfer_out_isSet = true;
}

qint64
SWGWallet::getAmount() {
    return amount;
}
void
SWGWallet::setAmount(qint64 amount) {
    this->amount = amount;
    this->m_amount_isSet = true;
}

qint64
SWGWallet::getPendingCredit() {
    return pending_credit;
}
void
SWGWallet::setPendingCredit(qint64 pending_credit) {
    this->pending_credit = pending_credit;
    this->m_pending_credit_isSet = true;
}

qint64
SWGWallet::getPendingDebit() {
    return pending_debit;
}
void
SWGWallet::setPendingDebit(qint64 pending_debit) {
    this->pending_debit = pending_debit;
    this->m_pending_debit_isSet = true;
}

qint64
SWGWallet::getConfirmedDebit() {
    return confirmed_debit;
}
void
SWGWallet::setConfirmedDebit(qint64 confirmed_debit) {
    this->confirmed_debit = confirmed_debit;
    this->m_confirmed_debit_isSet = true;
}

QDateTime*
SWGWallet::getTimestamp() {
    return timestamp;
}
void
SWGWallet::setTimestamp(QDateTime* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}


bool
SWGWallet::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_account_isSet){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(m_deposited_isSet){ isObjectUpdated = true; break;}
        if(m_withdrawn_isSet){ isObjectUpdated = true; break;}
        if(m_transfer_in_isSet){ isObjectUpdated = true; break;}
        if(m_transfer_out_isSet){ isObjectUpdated = true; break;}
        if(m_amount_isSet){ isObjectUpdated = true; break;}
        if(m_pending_credit_isSet){ isObjectUpdated = true; break;}
        if(m_pending_debit_isSet){ isObjectUpdated = true; break;}
        if(m_confirmed_debit_isSet){ isObjectUpdated = true; break;}
        
    }while(false);
    return isObjectUpdated;
}
}

