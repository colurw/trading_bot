/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGMargin.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGMargin::SWGMargin(QString json) {
    init();
    this->fromJson(json);
}

SWGMargin::SWGMargin() {
    init();
}

SWGMargin::~SWGMargin() {
    this->cleanup();
}

void
SWGMargin::init() {
    account = 0L;
    m_account_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    risk_limit = 0L;
    m_risk_limit_isSet = false;
    state = new QString("");
    m_state_isSet = false;
    amount = 0L;
    m_amount_isSet = false;
    prev_realised_pnl = 0L;
    m_prev_realised_pnl_isSet = false;
    gross_comm = 0L;
    m_gross_comm_isSet = false;
    gross_open_cost = 0L;
    m_gross_open_cost_isSet = false;
    gross_open_premium = 0L;
    m_gross_open_premium_isSet = false;
    gross_exec_cost = 0L;
    m_gross_exec_cost_isSet = false;
    gross_mark_value = 0L;
    m_gross_mark_value_isSet = false;
    risk_value = 0L;
    m_risk_value_isSet = false;
    init_margin = 0L;
    m_init_margin_isSet = false;
    maint_margin = 0L;
    m_maint_margin_isSet = false;
    target_excess_margin = 0L;
    m_target_excess_margin_isSet = false;
    realised_pnl = 0L;
    m_realised_pnl_isSet = false;
    unrealised_pnl = 0L;
    m_unrealised_pnl_isSet = false;
    wallet_balance = 0L;
    m_wallet_balance_isSet = false;
    margin_balance = 0L;
    m_margin_balance_isSet = false;
    margin_leverage = 0.0;
    m_margin_leverage_isSet = false;
    margin_used_pcnt = 0.0;
    m_margin_used_pcnt_isSet = false;
    excess_margin = 0L;
    m_excess_margin_isSet = false;
    available_margin = 0L;
    m_available_margin_isSet = false;
    withdrawable_margin = 0L;
    m_withdrawable_margin_isSet = false;
    maker_fee_discount = 0.0;
    m_maker_fee_discount_isSet = false;
    taker_fee_discount = 0.0;
    m_taker_fee_discount_isSet = false;
    timestamp = NULL;
    m_timestamp_isSet = false;
}

void
SWGMargin::cleanup() {

    if(currency != nullptr) { 
        delete currency;
    }

    if(state != nullptr) { 
        delete state;
    }






















    if(timestamp != nullptr) { 
        delete timestamp;
    }
}

SWGMargin*
SWGMargin::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGMargin::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&account, pJson["account"], "qint64", "");
    
    ::Swagger::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::Swagger::setValue(&risk_limit, pJson["riskLimit"], "qint64", "");
    
    ::Swagger::setValue(&state, pJson["state"], "QString", "QString");
    
    ::Swagger::setValue(&amount, pJson["amount"], "qint64", "");
    
    ::Swagger::setValue(&prev_realised_pnl, pJson["prevRealisedPnl"], "qint64", "");
    
    ::Swagger::setValue(&gross_comm, pJson["grossComm"], "qint64", "");
    
    ::Swagger::setValue(&gross_open_cost, pJson["grossOpenCost"], "qint64", "");
    
    ::Swagger::setValue(&gross_open_premium, pJson["grossOpenPremium"], "qint64", "");
    
    ::Swagger::setValue(&gross_exec_cost, pJson["grossExecCost"], "qint64", "");
    
    ::Swagger::setValue(&gross_mark_value, pJson["grossMarkValue"], "qint64", "");
    
    ::Swagger::setValue(&risk_value, pJson["riskValue"], "qint64", "");
    
    ::Swagger::setValue(&init_margin, pJson["initMargin"], "qint64", "");
    
    ::Swagger::setValue(&maint_margin, pJson["maintMargin"], "qint64", "");
    
    ::Swagger::setValue(&target_excess_margin, pJson["targetExcessMargin"], "qint64", "");
    
    ::Swagger::setValue(&realised_pnl, pJson["realisedPnl"], "qint64", "");
    
    ::Swagger::setValue(&unrealised_pnl, pJson["unrealisedPnl"], "qint64", "");
    
    ::Swagger::setValue(&wallet_balance, pJson["walletBalance"], "qint64", "");
    
    ::Swagger::setValue(&margin_balance, pJson["marginBalance"], "qint64", "");
    
    ::Swagger::setValue(&margin_leverage, pJson["marginLeverage"], "double", "");
    
    ::Swagger::setValue(&margin_used_pcnt, pJson["marginUsedPcnt"], "double", "");
    
    ::Swagger::setValue(&excess_margin, pJson["excessMargin"], "qint64", "");
    
    ::Swagger::setValue(&available_margin, pJson["availableMargin"], "qint64", "");
    
    ::Swagger::setValue(&withdrawable_margin, pJson["withdrawableMargin"], "qint64", "");
    
    ::Swagger::setValue(&maker_fee_discount, pJson["makerFeeDiscount"], "double", "");
    
    ::Swagger::setValue(&taker_fee_discount, pJson["takerFeeDiscount"], "double", "");
    
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "QDateTime", "QDateTime");
    
}

QString
SWGMargin::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGMargin::asJsonObject() {
    QJsonObject obj;
    if(m_account_isSet){
        obj.insert("account", QJsonValue(account));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(m_risk_limit_isSet){
        obj.insert("riskLimit", QJsonValue(risk_limit));
    }
    if(state != nullptr && *state != QString("")){
        toJsonValue(QString("state"), state, obj, QString("QString"));
    }
    if(m_amount_isSet){
        obj.insert("amount", QJsonValue(amount));
    }
    if(m_prev_realised_pnl_isSet){
        obj.insert("prevRealisedPnl", QJsonValue(prev_realised_pnl));
    }
    if(m_gross_comm_isSet){
        obj.insert("grossComm", QJsonValue(gross_comm));
    }
    if(m_gross_open_cost_isSet){
        obj.insert("grossOpenCost", QJsonValue(gross_open_cost));
    }
    if(m_gross_open_premium_isSet){
        obj.insert("grossOpenPremium", QJsonValue(gross_open_premium));
    }
    if(m_gross_exec_cost_isSet){
        obj.insert("grossExecCost", QJsonValue(gross_exec_cost));
    }
    if(m_gross_mark_value_isSet){
        obj.insert("grossMarkValue", QJsonValue(gross_mark_value));
    }
    if(m_risk_value_isSet){
        obj.insert("riskValue", QJsonValue(risk_value));
    }
    if(m_init_margin_isSet){
        obj.insert("initMargin", QJsonValue(init_margin));
    }
    if(m_maint_margin_isSet){
        obj.insert("maintMargin", QJsonValue(maint_margin));
    }
    if(m_target_excess_margin_isSet){
        obj.insert("targetExcessMargin", QJsonValue(target_excess_margin));
    }
    if(m_realised_pnl_isSet){
        obj.insert("realisedPnl", QJsonValue(realised_pnl));
    }
    if(m_unrealised_pnl_isSet){
        obj.insert("unrealisedPnl", QJsonValue(unrealised_pnl));
    }
    if(m_wallet_balance_isSet){
        obj.insert("walletBalance", QJsonValue(wallet_balance));
    }
    if(m_margin_balance_isSet){
        obj.insert("marginBalance", QJsonValue(margin_balance));
    }
    if(m_margin_leverage_isSet){
        obj.insert("marginLeverage", QJsonValue(margin_leverage));
    }
    if(m_margin_used_pcnt_isSet){
        obj.insert("marginUsedPcnt", QJsonValue(margin_used_pcnt));
    }
    if(m_excess_margin_isSet){
        obj.insert("excessMargin", QJsonValue(excess_margin));
    }
    if(m_available_margin_isSet){
        obj.insert("availableMargin", QJsonValue(available_margin));
    }
    if(m_withdrawable_margin_isSet){
        obj.insert("withdrawableMargin", QJsonValue(withdrawable_margin));
    }
    if(m_maker_fee_discount_isSet){
        obj.insert("makerFeeDiscount", QJsonValue(maker_fee_discount));
    }
    if(m_taker_fee_discount_isSet){
        obj.insert("takerFeeDiscount", QJsonValue(taker_fee_discount));
    }
    if(timestamp != nullptr) { 
        toJsonValue(QString("timestamp"), timestamp, obj, QString("QDateTime"));
    }

    return obj;
}

qint64
SWGMargin::getAccount() {
    return account;
}
void
SWGMargin::setAccount(qint64 account) {
    this->account = account;
    this->m_account_isSet = true;
}

QString*
SWGMargin::getCurrency() {
    return currency;
}
void
SWGMargin::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

qint64
SWGMargin::getRiskLimit() {
    return risk_limit;
}
void
SWGMargin::setRiskLimit(qint64 risk_limit) {
    this->risk_limit = risk_limit;
    this->m_risk_limit_isSet = true;
}

QString*
SWGMargin::getState() {
    return state;
}
void
SWGMargin::setState(QString* state) {
    this->state = state;
    this->m_state_isSet = true;
}

qint64
SWGMargin::getAmount() {
    return amount;
}
void
SWGMargin::setAmount(qint64 amount) {
    this->amount = amount;
    this->m_amount_isSet = true;
}

qint64
SWGMargin::getPrevRealisedPnl() {
    return prev_realised_pnl;
}
void
SWGMargin::setPrevRealisedPnl(qint64 prev_realised_pnl) {
    this->prev_realised_pnl = prev_realised_pnl;
    this->m_prev_realised_pnl_isSet = true;
}

qint64
SWGMargin::getGrossComm() {
    return gross_comm;
}
void
SWGMargin::setGrossComm(qint64 gross_comm) {
    this->gross_comm = gross_comm;
    this->m_gross_comm_isSet = true;
}

qint64
SWGMargin::getGrossOpenCost() {
    return gross_open_cost;
}
void
SWGMargin::setGrossOpenCost(qint64 gross_open_cost) {
    this->gross_open_cost = gross_open_cost;
    this->m_gross_open_cost_isSet = true;
}

qint64
SWGMargin::getGrossOpenPremium() {
    return gross_open_premium;
}
void
SWGMargin::setGrossOpenPremium(qint64 gross_open_premium) {
    this->gross_open_premium = gross_open_premium;
    this->m_gross_open_premium_isSet = true;
}

qint64
SWGMargin::getGrossExecCost() {
    return gross_exec_cost;
}
void
SWGMargin::setGrossExecCost(qint64 gross_exec_cost) {
    this->gross_exec_cost = gross_exec_cost;
    this->m_gross_exec_cost_isSet = true;
}

qint64
SWGMargin::getGrossMarkValue() {
    return gross_mark_value;
}
void
SWGMargin::setGrossMarkValue(qint64 gross_mark_value) {
    this->gross_mark_value = gross_mark_value;
    this->m_gross_mark_value_isSet = true;
}

qint64
SWGMargin::getRiskValue() {
    return risk_value;
}
void
SWGMargin::setRiskValue(qint64 risk_value) {
    this->risk_value = risk_value;
    this->m_risk_value_isSet = true;
}

qint64
SWGMargin::getInitMargin() {
    return init_margin;
}
void
SWGMargin::setInitMargin(qint64 init_margin) {
    this->init_margin = init_margin;
    this->m_init_margin_isSet = true;
}

qint64
SWGMargin::getMaintMargin() {
    return maint_margin;
}
void
SWGMargin::setMaintMargin(qint64 maint_margin) {
    this->maint_margin = maint_margin;
    this->m_maint_margin_isSet = true;
}

qint64
SWGMargin::getTargetExcessMargin() {
    return target_excess_margin;
}
void
SWGMargin::setTargetExcessMargin(qint64 target_excess_margin) {
    this->target_excess_margin = target_excess_margin;
    this->m_target_excess_margin_isSet = true;
}

qint64
SWGMargin::getRealisedPnl() {
    return realised_pnl;
}
void
SWGMargin::setRealisedPnl(qint64 realised_pnl) {
    this->realised_pnl = realised_pnl;
    this->m_realised_pnl_isSet = true;
}

qint64
SWGMargin::getUnrealisedPnl() {
    return unrealised_pnl;
}
void
SWGMargin::setUnrealisedPnl(qint64 unrealised_pnl) {
    this->unrealised_pnl = unrealised_pnl;
    this->m_unrealised_pnl_isSet = true;
}

qint64
SWGMargin::getWalletBalance() {
    return wallet_balance;
}
void
SWGMargin::setWalletBalance(qint64 wallet_balance) {
    this->wallet_balance = wallet_balance;
    this->m_wallet_balance_isSet = true;
}

qint64
SWGMargin::getMarginBalance() {
    return margin_balance;
}
void
SWGMargin::setMarginBalance(qint64 margin_balance) {
    this->margin_balance = margin_balance;
    this->m_margin_balance_isSet = true;
}

double
SWGMargin::getMarginLeverage() {
    return margin_leverage;
}
void
SWGMargin::setMarginLeverage(double margin_leverage) {
    this->margin_leverage = margin_leverage;
    this->m_margin_leverage_isSet = true;
}

double
SWGMargin::getMarginUsedPcnt() {
    return margin_used_pcnt;
}
void
SWGMargin::setMarginUsedPcnt(double margin_used_pcnt) {
    this->margin_used_pcnt = margin_used_pcnt;
    this->m_margin_used_pcnt_isSet = true;
}

qint64
SWGMargin::getExcessMargin() {
    return excess_margin;
}
void
SWGMargin::setExcessMargin(qint64 excess_margin) {
    this->excess_margin = excess_margin;
    this->m_excess_margin_isSet = true;
}

qint64
SWGMargin::getAvailableMargin() {
    return available_margin;
}
void
SWGMargin::setAvailableMargin(qint64 available_margin) {
    this->available_margin = available_margin;
    this->m_available_margin_isSet = true;
}

qint64
SWGMargin::getWithdrawableMargin() {
    return withdrawable_margin;
}
void
SWGMargin::setWithdrawableMargin(qint64 withdrawable_margin) {
    this->withdrawable_margin = withdrawable_margin;
    this->m_withdrawable_margin_isSet = true;
}

double
SWGMargin::getMakerFeeDiscount() {
    return maker_fee_discount;
}
void
SWGMargin::setMakerFeeDiscount(double maker_fee_discount) {
    this->maker_fee_discount = maker_fee_discount;
    this->m_maker_fee_discount_isSet = true;
}

double
SWGMargin::getTakerFeeDiscount() {
    return taker_fee_discount;
}
void
SWGMargin::setTakerFeeDiscount(double taker_fee_discount) {
    this->taker_fee_discount = taker_fee_discount;
    this->m_taker_fee_discount_isSet = true;
}

QDateTime*
SWGMargin::getTimestamp() {
    return timestamp;
}
void
SWGMargin::setTimestamp(QDateTime* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}


bool
SWGMargin::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_account_isSet){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(m_risk_limit_isSet){ isObjectUpdated = true; break;}
        if(state != nullptr && *state != QString("")){ isObjectUpdated = true; break;}
        if(m_amount_isSet){ isObjectUpdated = true; break;}
        if(m_prev_realised_pnl_isSet){ isObjectUpdated = true; break;}
        if(m_gross_comm_isSet){ isObjectUpdated = true; break;}
        if(m_gross_open_cost_isSet){ isObjectUpdated = true; break;}
        if(m_gross_open_premium_isSet){ isObjectUpdated = true; break;}
        if(m_gross_exec_cost_isSet){ isObjectUpdated = true; break;}
        if(m_gross_mark_value_isSet){ isObjectUpdated = true; break;}
        if(m_risk_value_isSet){ isObjectUpdated = true; break;}
        if(m_init_margin_isSet){ isObjectUpdated = true; break;}
        if(m_maint_margin_isSet){ isObjectUpdated = true; break;}
        if(m_target_excess_margin_isSet){ isObjectUpdated = true; break;}
        if(m_realised_pnl_isSet){ isObjectUpdated = true; break;}
        if(m_unrealised_pnl_isSet){ isObjectUpdated = true; break;}
        if(m_wallet_balance_isSet){ isObjectUpdated = true; break;}
        if(m_margin_balance_isSet){ isObjectUpdated = true; break;}
        if(m_margin_leverage_isSet){ isObjectUpdated = true; break;}
        if(m_margin_used_pcnt_isSet){ isObjectUpdated = true; break;}
        if(m_excess_margin_isSet){ isObjectUpdated = true; break;}
        if(m_available_margin_isSet){ isObjectUpdated = true; break;}
        if(m_withdrawable_margin_isSet){ isObjectUpdated = true; break;}
        if(m_maker_fee_discount_isSet){ isObjectUpdated = true; break;}
        if(m_taker_fee_discount_isSet){ isObjectUpdated = true; break;}
        
    }while(false);
    return isObjectUpdated;
}
}

