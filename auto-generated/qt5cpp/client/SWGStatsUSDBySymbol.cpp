/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGStatsUSDBySymbol.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGStatsUSDBySymbol::SWGStatsUSDBySymbol(QString json) {
    init();
    this->fromJson(json);
}

SWGStatsUSDBySymbol::SWGStatsUSDBySymbol() {
    init();
}

SWGStatsUSDBySymbol::~SWGStatsUSDBySymbol() {
    this->cleanup();
}

void
SWGStatsUSDBySymbol::init() {
    symbol = new QString("");
    m_symbol_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    turnover24h = 0L;
    m_turnover24h_isSet = false;
    turnover30d = 0L;
    m_turnover30d_isSet = false;
    turnover365d = 0L;
    m_turnover365d_isSet = false;
    turnover = 0L;
    m_turnover_isSet = false;
}

void
SWGStatsUSDBySymbol::cleanup() {
    if(symbol != nullptr) { 
        delete symbol;
    }
    if(currency != nullptr) { 
        delete currency;
    }




}

SWGStatsUSDBySymbol*
SWGStatsUSDBySymbol::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGStatsUSDBySymbol::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&symbol, pJson["symbol"], "QString", "QString");
    
    ::Swagger::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::Swagger::setValue(&turnover24h, pJson["turnover24h"], "qint64", "");
    
    ::Swagger::setValue(&turnover30d, pJson["turnover30d"], "qint64", "");
    
    ::Swagger::setValue(&turnover365d, pJson["turnover365d"], "qint64", "");
    
    ::Swagger::setValue(&turnover, pJson["turnover"], "qint64", "");
    
}

QString
SWGStatsUSDBySymbol::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGStatsUSDBySymbol::asJsonObject() {
    QJsonObject obj;
    if(symbol != nullptr && *symbol != QString("")){
        toJsonValue(QString("symbol"), symbol, obj, QString("QString"));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(m_turnover24h_isSet){
        obj.insert("turnover24h", QJsonValue(turnover24h));
    }
    if(m_turnover30d_isSet){
        obj.insert("turnover30d", QJsonValue(turnover30d));
    }
    if(m_turnover365d_isSet){
        obj.insert("turnover365d", QJsonValue(turnover365d));
    }
    if(m_turnover_isSet){
        obj.insert("turnover", QJsonValue(turnover));
    }

    return obj;
}

QString*
SWGStatsUSDBySymbol::getSymbol() {
    return symbol;
}
void
SWGStatsUSDBySymbol::setSymbol(QString* symbol) {
    this->symbol = symbol;
    this->m_symbol_isSet = true;
}

QString*
SWGStatsUSDBySymbol::getCurrency() {
    return currency;
}
void
SWGStatsUSDBySymbol::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

qint64
SWGStatsUSDBySymbol::getTurnover24h() {
    return turnover24h;
}
void
SWGStatsUSDBySymbol::setTurnover24h(qint64 turnover24h) {
    this->turnover24h = turnover24h;
    this->m_turnover24h_isSet = true;
}

qint64
SWGStatsUSDBySymbol::getTurnover30d() {
    return turnover30d;
}
void
SWGStatsUSDBySymbol::setTurnover30d(qint64 turnover30d) {
    this->turnover30d = turnover30d;
    this->m_turnover30d_isSet = true;
}

qint64
SWGStatsUSDBySymbol::getTurnover365d() {
    return turnover365d;
}
void
SWGStatsUSDBySymbol::setTurnover365d(qint64 turnover365d) {
    this->turnover365d = turnover365d;
    this->m_turnover365d_isSet = true;
}

qint64
SWGStatsUSDBySymbol::getTurnover() {
    return turnover;
}
void
SWGStatsUSDBySymbol::setTurnover(qint64 turnover) {
    this->turnover = turnover;
    this->m_turnover_isSet = true;
}


bool
SWGStatsUSDBySymbol::isSet(){
    bool isObjectUpdated = false;
    do{
        if(symbol != nullptr && *symbol != QString("")){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(m_turnover24h_isSet){ isObjectUpdated = true; break;}
        if(m_turnover30d_isSet){ isObjectUpdated = true; break;}
        if(m_turnover365d_isSet){ isObjectUpdated = true; break;}
        if(m_turnover_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

