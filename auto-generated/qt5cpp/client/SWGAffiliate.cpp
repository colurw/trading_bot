/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGAffiliate.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGAffiliate::SWGAffiliate(QString json) {
    init();
    this->fromJson(json);
}

SWGAffiliate::SWGAffiliate() {
    init();
}

SWGAffiliate::~SWGAffiliate() {
    this->cleanup();
}

void
SWGAffiliate::init() {
    account = 0L;
    m_account_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
    prev_payout = 0L;
    m_prev_payout_isSet = false;
    prev_turnover = 0L;
    m_prev_turnover_isSet = false;
    prev_comm = 0L;
    m_prev_comm_isSet = false;
    prev_timestamp = NULL;
    m_prev_timestamp_isSet = false;
    exec_turnover = 0L;
    m_exec_turnover_isSet = false;
    exec_comm = 0L;
    m_exec_comm_isSet = false;
    total_referrals = 0L;
    m_total_referrals_isSet = false;
    total_turnover = 0L;
    m_total_turnover_isSet = false;
    total_comm = 0L;
    m_total_comm_isSet = false;
    payout_pcnt = 0.0;
    m_payout_pcnt_isSet = false;
    pending_payout = 0L;
    m_pending_payout_isSet = false;
    timestamp = NULL;
    m_timestamp_isSet = false;
    referrer_account = 0.0;
    m_referrer_account_isSet = false;
    referral_discount = 0.0;
    m_referral_discount_isSet = false;
    affiliate_payout = 0.0;
    m_affiliate_payout_isSet = false;
}

void
SWGAffiliate::cleanup() {

    if(currency != nullptr) { 
        delete currency;
    }



    if(prev_timestamp != nullptr) { 
        delete prev_timestamp;
    }







    if(timestamp != nullptr) { 
        delete timestamp;
    }



}

SWGAffiliate*
SWGAffiliate::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGAffiliate::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&account, pJson["account"], "qint64", "");
    
    ::Swagger::setValue(&currency, pJson["currency"], "QString", "QString");
    
    ::Swagger::setValue(&prev_payout, pJson["prevPayout"], "qint64", "");
    
    ::Swagger::setValue(&prev_turnover, pJson["prevTurnover"], "qint64", "");
    
    ::Swagger::setValue(&prev_comm, pJson["prevComm"], "qint64", "");
    
    ::Swagger::setValue(&prev_timestamp, pJson["prevTimestamp"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&exec_turnover, pJson["execTurnover"], "qint64", "");
    
    ::Swagger::setValue(&exec_comm, pJson["execComm"], "qint64", "");
    
    ::Swagger::setValue(&total_referrals, pJson["totalReferrals"], "qint64", "");
    
    ::Swagger::setValue(&total_turnover, pJson["totalTurnover"], "qint64", "");
    
    ::Swagger::setValue(&total_comm, pJson["totalComm"], "qint64", "");
    
    ::Swagger::setValue(&payout_pcnt, pJson["payoutPcnt"], "double", "");
    
    ::Swagger::setValue(&pending_payout, pJson["pendingPayout"], "qint64", "");
    
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "QDateTime", "QDateTime");
    
    ::Swagger::setValue(&referrer_account, pJson["referrerAccount"], "double", "");
    
    ::Swagger::setValue(&referral_discount, pJson["referralDiscount"], "double", "");
    
    ::Swagger::setValue(&affiliate_payout, pJson["affiliatePayout"], "double", "");
    
}

QString
SWGAffiliate::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGAffiliate::asJsonObject() {
    QJsonObject obj;
    if(m_account_isSet){
        obj.insert("account", QJsonValue(account));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }
    if(m_prev_payout_isSet){
        obj.insert("prevPayout", QJsonValue(prev_payout));
    }
    if(m_prev_turnover_isSet){
        obj.insert("prevTurnover", QJsonValue(prev_turnover));
    }
    if(m_prev_comm_isSet){
        obj.insert("prevComm", QJsonValue(prev_comm));
    }
    if(prev_timestamp != nullptr) { 
        toJsonValue(QString("prevTimestamp"), prev_timestamp, obj, QString("QDateTime"));
    }
    if(m_exec_turnover_isSet){
        obj.insert("execTurnover", QJsonValue(exec_turnover));
    }
    if(m_exec_comm_isSet){
        obj.insert("execComm", QJsonValue(exec_comm));
    }
    if(m_total_referrals_isSet){
        obj.insert("totalReferrals", QJsonValue(total_referrals));
    }
    if(m_total_turnover_isSet){
        obj.insert("totalTurnover", QJsonValue(total_turnover));
    }
    if(m_total_comm_isSet){
        obj.insert("totalComm", QJsonValue(total_comm));
    }
    if(m_payout_pcnt_isSet){
        obj.insert("payoutPcnt", QJsonValue(payout_pcnt));
    }
    if(m_pending_payout_isSet){
        obj.insert("pendingPayout", QJsonValue(pending_payout));
    }
    if(timestamp != nullptr) { 
        toJsonValue(QString("timestamp"), timestamp, obj, QString("QDateTime"));
    }
    if(m_referrer_account_isSet){
        obj.insert("referrerAccount", QJsonValue(referrer_account));
    }
    if(m_referral_discount_isSet){
        obj.insert("referralDiscount", QJsonValue(referral_discount));
    }
    if(m_affiliate_payout_isSet){
        obj.insert("affiliatePayout", QJsonValue(affiliate_payout));
    }

    return obj;
}

qint64
SWGAffiliate::getAccount() {
    return account;
}
void
SWGAffiliate::setAccount(qint64 account) {
    this->account = account;
    this->m_account_isSet = true;
}

QString*
SWGAffiliate::getCurrency() {
    return currency;
}
void
SWGAffiliate::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}

qint64
SWGAffiliate::getPrevPayout() {
    return prev_payout;
}
void
SWGAffiliate::setPrevPayout(qint64 prev_payout) {
    this->prev_payout = prev_payout;
    this->m_prev_payout_isSet = true;
}

qint64
SWGAffiliate::getPrevTurnover() {
    return prev_turnover;
}
void
SWGAffiliate::setPrevTurnover(qint64 prev_turnover) {
    this->prev_turnover = prev_turnover;
    this->m_prev_turnover_isSet = true;
}

qint64
SWGAffiliate::getPrevComm() {
    return prev_comm;
}
void
SWGAffiliate::setPrevComm(qint64 prev_comm) {
    this->prev_comm = prev_comm;
    this->m_prev_comm_isSet = true;
}

QDateTime*
SWGAffiliate::getPrevTimestamp() {
    return prev_timestamp;
}
void
SWGAffiliate::setPrevTimestamp(QDateTime* prev_timestamp) {
    this->prev_timestamp = prev_timestamp;
    this->m_prev_timestamp_isSet = true;
}

qint64
SWGAffiliate::getExecTurnover() {
    return exec_turnover;
}
void
SWGAffiliate::setExecTurnover(qint64 exec_turnover) {
    this->exec_turnover = exec_turnover;
    this->m_exec_turnover_isSet = true;
}

qint64
SWGAffiliate::getExecComm() {
    return exec_comm;
}
void
SWGAffiliate::setExecComm(qint64 exec_comm) {
    this->exec_comm = exec_comm;
    this->m_exec_comm_isSet = true;
}

qint64
SWGAffiliate::getTotalReferrals() {
    return total_referrals;
}
void
SWGAffiliate::setTotalReferrals(qint64 total_referrals) {
    this->total_referrals = total_referrals;
    this->m_total_referrals_isSet = true;
}

qint64
SWGAffiliate::getTotalTurnover() {
    return total_turnover;
}
void
SWGAffiliate::setTotalTurnover(qint64 total_turnover) {
    this->total_turnover = total_turnover;
    this->m_total_turnover_isSet = true;
}

qint64
SWGAffiliate::getTotalComm() {
    return total_comm;
}
void
SWGAffiliate::setTotalComm(qint64 total_comm) {
    this->total_comm = total_comm;
    this->m_total_comm_isSet = true;
}

double
SWGAffiliate::getPayoutPcnt() {
    return payout_pcnt;
}
void
SWGAffiliate::setPayoutPcnt(double payout_pcnt) {
    this->payout_pcnt = payout_pcnt;
    this->m_payout_pcnt_isSet = true;
}

qint64
SWGAffiliate::getPendingPayout() {
    return pending_payout;
}
void
SWGAffiliate::setPendingPayout(qint64 pending_payout) {
    this->pending_payout = pending_payout;
    this->m_pending_payout_isSet = true;
}

QDateTime*
SWGAffiliate::getTimestamp() {
    return timestamp;
}
void
SWGAffiliate::setTimestamp(QDateTime* timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

double
SWGAffiliate::getReferrerAccount() {
    return referrer_account;
}
void
SWGAffiliate::setReferrerAccount(double referrer_account) {
    this->referrer_account = referrer_account;
    this->m_referrer_account_isSet = true;
}

double
SWGAffiliate::getReferralDiscount() {
    return referral_discount;
}
void
SWGAffiliate::setReferralDiscount(double referral_discount) {
    this->referral_discount = referral_discount;
    this->m_referral_discount_isSet = true;
}

double
SWGAffiliate::getAffiliatePayout() {
    return affiliate_payout;
}
void
SWGAffiliate::setAffiliatePayout(double affiliate_payout) {
    this->affiliate_payout = affiliate_payout;
    this->m_affiliate_payout_isSet = true;
}


bool
SWGAffiliate::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_account_isSet){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
        if(m_prev_payout_isSet){ isObjectUpdated = true; break;}
        if(m_prev_turnover_isSet){ isObjectUpdated = true; break;}
        if(m_prev_comm_isSet){ isObjectUpdated = true; break;}
        
        if(m_exec_turnover_isSet){ isObjectUpdated = true; break;}
        if(m_exec_comm_isSet){ isObjectUpdated = true; break;}
        if(m_total_referrals_isSet){ isObjectUpdated = true; break;}
        if(m_total_turnover_isSet){ isObjectUpdated = true; break;}
        if(m_total_comm_isSet){ isObjectUpdated = true; break;}
        if(m_payout_pcnt_isSet){ isObjectUpdated = true; break;}
        if(m_pending_payout_isSet){ isObjectUpdated = true; break;}
        
        if(m_referrer_account_isSet){ isObjectUpdated = true; break;}
        if(m_referral_discount_isSet){ isObjectUpdated = true; break;}
        if(m_affiliate_payout_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

