/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SWGPosition.h
 *
 * Summary of Open and Closed Positions
 */

#ifndef SWGPosition_H_
#define SWGPosition_H_

#include <QJsonObject>


#include <QDateTime>
#include <QString>

#include "SWGObject.h"

namespace Swagger {

class SWGPosition: public SWGObject {
public:
    SWGPosition();
    SWGPosition(QString json);
    ~SWGPosition();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    SWGPosition* fromJson(QString jsonString) override;

    qint64 getAccount();
    void setAccount(qint64 account);

    QString* getSymbol();
    void setSymbol(QString* symbol);

    QString* getCurrency();
    void setCurrency(QString* currency);

    QString* getUnderlying();
    void setUnderlying(QString* underlying);

    QString* getQuoteCurrency();
    void setQuoteCurrency(QString* quote_currency);

    double getCommission();
    void setCommission(double commission);

    double getInitMarginReq();
    void setInitMarginReq(double init_margin_req);

    double getMaintMarginReq();
    void setMaintMarginReq(double maint_margin_req);

    qint64 getRiskLimit();
    void setRiskLimit(qint64 risk_limit);

    double getLeverage();
    void setLeverage(double leverage);

    bool isCrossMargin();
    void setCrossMargin(bool cross_margin);

    double getDeleveragePercentile();
    void setDeleveragePercentile(double deleverage_percentile);

    qint64 getRebalancedPnl();
    void setRebalancedPnl(qint64 rebalanced_pnl);

    qint64 getPrevRealisedPnl();
    void setPrevRealisedPnl(qint64 prev_realised_pnl);

    qint64 getPrevUnrealisedPnl();
    void setPrevUnrealisedPnl(qint64 prev_unrealised_pnl);

    qint64 getOpeningQty();
    void setOpeningQty(qint64 opening_qty);

    qint64 getOpenOrderBuyQty();
    void setOpenOrderBuyQty(qint64 open_order_buy_qty);

    qint64 getOpenOrderBuyCost();
    void setOpenOrderBuyCost(qint64 open_order_buy_cost);

    qint64 getOpenOrderBuyPremium();
    void setOpenOrderBuyPremium(qint64 open_order_buy_premium);

    qint64 getOpenOrderSellQty();
    void setOpenOrderSellQty(qint64 open_order_sell_qty);

    qint64 getOpenOrderSellCost();
    void setOpenOrderSellCost(qint64 open_order_sell_cost);

    qint64 getOpenOrderSellPremium();
    void setOpenOrderSellPremium(qint64 open_order_sell_premium);

    qint64 getCurrentQty();
    void setCurrentQty(qint64 current_qty);

    qint64 getCurrentCost();
    void setCurrentCost(qint64 current_cost);

    qint64 getCurrentComm();
    void setCurrentComm(qint64 current_comm);

    qint64 getRealisedCost();
    void setRealisedCost(qint64 realised_cost);

    qint64 getUnrealisedCost();
    void setUnrealisedCost(qint64 unrealised_cost);

    qint64 getGrossOpenPremium();
    void setGrossOpenPremium(qint64 gross_open_premium);

    bool isIsOpen();
    void setIsOpen(bool is_open);

    double getMarkPrice();
    void setMarkPrice(double mark_price);

    qint64 getMarkValue();
    void setMarkValue(qint64 mark_value);

    qint64 getRiskValue();
    void setRiskValue(qint64 risk_value);

    double getHomeNotional();
    void setHomeNotional(double home_notional);

    double getForeignNotional();
    void setForeignNotional(double foreign_notional);

    QString* getPosState();
    void setPosState(QString* pos_state);

    qint64 getPosCost();
    void setPosCost(qint64 pos_cost);

    qint64 getPosCross();
    void setPosCross(qint64 pos_cross);

    qint64 getPosComm();
    void setPosComm(qint64 pos_comm);

    qint64 getPosLoss();
    void setPosLoss(qint64 pos_loss);

    qint64 getPosMargin();
    void setPosMargin(qint64 pos_margin);

    qint64 getPosMaint();
    void setPosMaint(qint64 pos_maint);

    qint64 getInitMargin();
    void setInitMargin(qint64 init_margin);

    qint64 getMaintMargin();
    void setMaintMargin(qint64 maint_margin);

    qint64 getRealisedPnl();
    void setRealisedPnl(qint64 realised_pnl);

    qint64 getUnrealisedPnl();
    void setUnrealisedPnl(qint64 unrealised_pnl);

    double getUnrealisedPnlPcnt();
    void setUnrealisedPnlPcnt(double unrealised_pnl_pcnt);

    double getUnrealisedRoePcnt();
    void setUnrealisedRoePcnt(double unrealised_roe_pcnt);

    double getAvgCostPrice();
    void setAvgCostPrice(double avg_cost_price);

    double getAvgEntryPrice();
    void setAvgEntryPrice(double avg_entry_price);

    double getBreakEvenPrice();
    void setBreakEvenPrice(double break_even_price);

    double getMarginCallPrice();
    void setMarginCallPrice(double margin_call_price);

    double getLiquidationPrice();
    void setLiquidationPrice(double liquidation_price);

    double getBankruptPrice();
    void setBankruptPrice(double bankrupt_price);

    QDateTime* getTimestamp();
    void setTimestamp(QDateTime* timestamp);


    virtual bool isSet() override;

private:
    qint64 account;
    bool m_account_isSet;

    QString* symbol;
    bool m_symbol_isSet;

    QString* currency;
    bool m_currency_isSet;

    QString* underlying;
    bool m_underlying_isSet;

    QString* quote_currency;
    bool m_quote_currency_isSet;

    double commission;
    bool m_commission_isSet;

    double init_margin_req;
    bool m_init_margin_req_isSet;

    double maint_margin_req;
    bool m_maint_margin_req_isSet;

    qint64 risk_limit;
    bool m_risk_limit_isSet;

    double leverage;
    bool m_leverage_isSet;

    bool cross_margin;
    bool m_cross_margin_isSet;

    double deleverage_percentile;
    bool m_deleverage_percentile_isSet;

    qint64 rebalanced_pnl;
    bool m_rebalanced_pnl_isSet;

    qint64 prev_realised_pnl;
    bool m_prev_realised_pnl_isSet;

    qint64 prev_unrealised_pnl;
    bool m_prev_unrealised_pnl_isSet;

    qint64 opening_qty;
    bool m_opening_qty_isSet;

    qint64 open_order_buy_qty;
    bool m_open_order_buy_qty_isSet;

    qint64 open_order_buy_cost;
    bool m_open_order_buy_cost_isSet;

    qint64 open_order_buy_premium;
    bool m_open_order_buy_premium_isSet;

    qint64 open_order_sell_qty;
    bool m_open_order_sell_qty_isSet;

    qint64 open_order_sell_cost;
    bool m_open_order_sell_cost_isSet;

    qint64 open_order_sell_premium;
    bool m_open_order_sell_premium_isSet;

    qint64 current_qty;
    bool m_current_qty_isSet;

    qint64 current_cost;
    bool m_current_cost_isSet;

    qint64 current_comm;
    bool m_current_comm_isSet;

    qint64 realised_cost;
    bool m_realised_cost_isSet;

    qint64 unrealised_cost;
    bool m_unrealised_cost_isSet;

    qint64 gross_open_premium;
    bool m_gross_open_premium_isSet;

    bool is_open;
    bool m_is_open_isSet;

    double mark_price;
    bool m_mark_price_isSet;

    qint64 mark_value;
    bool m_mark_value_isSet;

    qint64 risk_value;
    bool m_risk_value_isSet;

    double home_notional;
    bool m_home_notional_isSet;

    double foreign_notional;
    bool m_foreign_notional_isSet;

    QString* pos_state;
    bool m_pos_state_isSet;

    qint64 pos_cost;
    bool m_pos_cost_isSet;

    qint64 pos_cross;
    bool m_pos_cross_isSet;

    qint64 pos_comm;
    bool m_pos_comm_isSet;

    qint64 pos_loss;
    bool m_pos_loss_isSet;

    qint64 pos_margin;
    bool m_pos_margin_isSet;

    qint64 pos_maint;
    bool m_pos_maint_isSet;

    qint64 init_margin;
    bool m_init_margin_isSet;

    qint64 maint_margin;
    bool m_maint_margin_isSet;

    qint64 realised_pnl;
    bool m_realised_pnl_isSet;

    qint64 unrealised_pnl;
    bool m_unrealised_pnl_isSet;

    double unrealised_pnl_pcnt;
    bool m_unrealised_pnl_pcnt_isSet;

    double unrealised_roe_pcnt;
    bool m_unrealised_roe_pcnt_isSet;

    double avg_cost_price;
    bool m_avg_cost_price_isSet;

    double avg_entry_price;
    bool m_avg_entry_price_isSet;

    double break_even_price;
    bool m_break_even_price_isSet;

    double margin_call_price;
    bool m_margin_call_price_isSet;

    double liquidation_price;
    bool m_liquidation_price_isSet;

    double bankrupt_price;
    bool m_bankrupt_price_isSet;

    QDateTime* timestamp;
    bool m_timestamp_isSet;

};

}

#endif /* SWGPosition_H_ */
