/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.42-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "WalletSummaryRecord.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

WalletSummaryRecord::WalletSummaryRecord()
{
    m_Account = 0.0;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_TransactType = utility::conversions::to_string_t("");
    m_TransactTypeIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Amount = 0.0;
    m_AmountIsSet = false;
    m_PendingDebit = 0.0;
    m_PendingDebitIsSet = false;
    m_RealisedPnl = 0.0;
    m_RealisedPnlIsSet = false;
    m_WalletBalance = 0.0;
    m_WalletBalanceIsSet = false;
    m_UnrealisedPnl = 0.0;
    m_UnrealisedPnlIsSet = false;
    m_MarginBalance = 0.0;
    m_MarginBalanceIsSet = false;
}

WalletSummaryRecord::~WalletSummaryRecord()
{
}

void WalletSummaryRecord::validate()
{
    // TODO: implement validation
}

web::json::value WalletSummaryRecord::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("account")] = ModelBase::toJson(m_Account);
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_TransactTypeIsSet)
    {
        val[utility::conversions::to_string_t("transactType")] = ModelBase::toJson(m_TransactType);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t("symbol")] = ModelBase::toJson(m_Symbol);
    }
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t("amount")] = ModelBase::toJson(m_Amount);
    }
    if(m_PendingDebitIsSet)
    {
        val[utility::conversions::to_string_t("pendingDebit")] = ModelBase::toJson(m_PendingDebit);
    }
    if(m_RealisedPnlIsSet)
    {
        val[utility::conversions::to_string_t("realisedPnl")] = ModelBase::toJson(m_RealisedPnl);
    }
    if(m_WalletBalanceIsSet)
    {
        val[utility::conversions::to_string_t("walletBalance")] = ModelBase::toJson(m_WalletBalance);
    }
    if(m_UnrealisedPnlIsSet)
    {
        val[utility::conversions::to_string_t("unrealisedPnl")] = ModelBase::toJson(m_UnrealisedPnl);
    }
    if(m_MarginBalanceIsSet)
    {
        val[utility::conversions::to_string_t("marginBalance")] = ModelBase::toJson(m_MarginBalance);
    }

    return val;
}

void WalletSummaryRecord::fromJson(web::json::value& val)
{
    setAccount(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("account")]));
    if(val.has_field(utility::conversions::to_string_t("currency")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("currency")];
        if(!fieldValue.is_null())
        {
            setCurrency(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transactType")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("transactType")];
        if(!fieldValue.is_null())
        {
            setTransactType(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("symbol")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("symbol")];
        if(!fieldValue.is_null())
        {
            setSymbol(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("amount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("amount")];
        if(!fieldValue.is_null())
        {
            setAmount(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pendingDebit")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("pendingDebit")];
        if(!fieldValue.is_null())
        {
            setPendingDebit(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("realisedPnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("realisedPnl")];
        if(!fieldValue.is_null())
        {
            setRealisedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("walletBalance")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("walletBalance")];
        if(!fieldValue.is_null())
        {
            setWalletBalance(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("unrealisedPnl")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("unrealisedPnl")];
        if(!fieldValue.is_null())
        {
            setUnrealisedPnl(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("marginBalance")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("marginBalance")];
        if(!fieldValue.is_null())
        {
            setMarginBalance(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void WalletSummaryRecord::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account"), m_Account));
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
        
    }
    if(m_TransactTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("transactType"), m_TransactType));
        
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("symbol"), m_Symbol));
        
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amount"), m_Amount));
    }
    if(m_PendingDebitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pendingDebit"), m_PendingDebit));
    }
    if(m_RealisedPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("realisedPnl"), m_RealisedPnl));
    }
    if(m_WalletBalanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("walletBalance"), m_WalletBalance));
    }
    if(m_UnrealisedPnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("unrealisedPnl"), m_UnrealisedPnl));
    }
    if(m_MarginBalanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("marginBalance"), m_MarginBalance));
    }
}

void WalletSummaryRecord::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setAccount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("account"))));
    if(multipart->hasContent(utility::conversions::to_string_t("currency")))
    {
        setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transactType")))
    {
        setTransactType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("transactType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("symbol")))
    {
        setSymbol(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("symbol"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("amount")))
    {
        setAmount(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("amount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pendingDebit")))
    {
        setPendingDebit(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("pendingDebit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("realisedPnl")))
    {
        setRealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("realisedPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("walletBalance")))
    {
        setWalletBalance(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("walletBalance"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("unrealisedPnl")))
    {
        setUnrealisedPnl(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("unrealisedPnl"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("marginBalance")))
    {
        setMarginBalance(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("marginBalance"))));
    }
}

double WalletSummaryRecord::getAccount() const
{
    return m_Account;
}


void WalletSummaryRecord::setAccount(double value)
{
    m_Account = value;
    
}
utility::string_t WalletSummaryRecord::getCurrency() const
{
    return m_Currency;
}


void WalletSummaryRecord::setCurrency(utility::string_t value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool WalletSummaryRecord::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void WalletSummaryRecord::unsetCurrency()
{
    m_CurrencyIsSet = false;
}

utility::string_t WalletSummaryRecord::getTransactType() const
{
    return m_TransactType;
}


void WalletSummaryRecord::setTransactType(utility::string_t value)
{
    m_TransactType = value;
    m_TransactTypeIsSet = true;
}
bool WalletSummaryRecord::transactTypeIsSet() const
{
    return m_TransactTypeIsSet;
}

void WalletSummaryRecord::unsetTransactType()
{
    m_TransactTypeIsSet = false;
}

utility::string_t WalletSummaryRecord::getSymbol() const
{
    return m_Symbol;
}


void WalletSummaryRecord::setSymbol(utility::string_t value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}
bool WalletSummaryRecord::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void WalletSummaryRecord::unsetSymbol()
{
    m_SymbolIsSet = false;
}

double WalletSummaryRecord::getAmount() const
{
    return m_Amount;
}


void WalletSummaryRecord::setAmount(double value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}
bool WalletSummaryRecord::amountIsSet() const
{
    return m_AmountIsSet;
}

void WalletSummaryRecord::unsetAmount()
{
    m_AmountIsSet = false;
}

double WalletSummaryRecord::getPendingDebit() const
{
    return m_PendingDebit;
}


void WalletSummaryRecord::setPendingDebit(double value)
{
    m_PendingDebit = value;
    m_PendingDebitIsSet = true;
}
bool WalletSummaryRecord::pendingDebitIsSet() const
{
    return m_PendingDebitIsSet;
}

void WalletSummaryRecord::unsetPendingDebit()
{
    m_PendingDebitIsSet = false;
}

double WalletSummaryRecord::getRealisedPnl() const
{
    return m_RealisedPnl;
}


void WalletSummaryRecord::setRealisedPnl(double value)
{
    m_RealisedPnl = value;
    m_RealisedPnlIsSet = true;
}
bool WalletSummaryRecord::realisedPnlIsSet() const
{
    return m_RealisedPnlIsSet;
}

void WalletSummaryRecord::unsetRealisedPnl()
{
    m_RealisedPnlIsSet = false;
}

double WalletSummaryRecord::getWalletBalance() const
{
    return m_WalletBalance;
}


void WalletSummaryRecord::setWalletBalance(double value)
{
    m_WalletBalance = value;
    m_WalletBalanceIsSet = true;
}
bool WalletSummaryRecord::walletBalanceIsSet() const
{
    return m_WalletBalanceIsSet;
}

void WalletSummaryRecord::unsetWalletBalance()
{
    m_WalletBalanceIsSet = false;
}

double WalletSummaryRecord::getUnrealisedPnl() const
{
    return m_UnrealisedPnl;
}


void WalletSummaryRecord::setUnrealisedPnl(double value)
{
    m_UnrealisedPnl = value;
    m_UnrealisedPnlIsSet = true;
}
bool WalletSummaryRecord::unrealisedPnlIsSet() const
{
    return m_UnrealisedPnlIsSet;
}

void WalletSummaryRecord::unsetUnrealisedPnl()
{
    m_UnrealisedPnlIsSet = false;
}

double WalletSummaryRecord::getMarginBalance() const
{
    return m_MarginBalance;
}


void WalletSummaryRecord::setMarginBalance(double value)
{
    m_MarginBalance = value;
    m_MarginBalanceIsSet = true;
}
bool WalletSummaryRecord::marginBalanceIsSet() const
{
    return m_MarginBalanceIsSet;
}

void WalletSummaryRecord::unsetMarginBalance()
{
    m_MarginBalanceIsSet = false;
}

}
}
}
}

