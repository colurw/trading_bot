/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.42-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Wallet.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Wallet::Wallet()
{
    m_Account = 0L;
    m_Currency = utility::conversions::to_string_t("");
    m_Deposited = 0L;
    m_DepositedIsSet = false;
    m_Withdrawn = 0L;
    m_WithdrawnIsSet = false;
    m_TransferIn = 0L;
    m_TransferInIsSet = false;
    m_TransferOut = 0L;
    m_TransferOutIsSet = false;
    m_Amount = 0L;
    m_AmountIsSet = false;
    m_PendingCredit = 0L;
    m_PendingCreditIsSet = false;
    m_PendingDebit = 0L;
    m_PendingDebitIsSet = false;
    m_ConfirmedDebit = 0L;
    m_ConfirmedDebitIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
}

Wallet::~Wallet()
{
}

void Wallet::validate()
{
    // TODO: implement validation
}

web::json::value Wallet::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("account")] = ModelBase::toJson(m_Account);
    val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);
    if(m_DepositedIsSet)
    {
        val[utility::conversions::to_string_t("deposited")] = ModelBase::toJson(m_Deposited);
    }
    if(m_WithdrawnIsSet)
    {
        val[utility::conversions::to_string_t("withdrawn")] = ModelBase::toJson(m_Withdrawn);
    }
    if(m_TransferInIsSet)
    {
        val[utility::conversions::to_string_t("transferIn")] = ModelBase::toJson(m_TransferIn);
    }
    if(m_TransferOutIsSet)
    {
        val[utility::conversions::to_string_t("transferOut")] = ModelBase::toJson(m_TransferOut);
    }
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t("amount")] = ModelBase::toJson(m_Amount);
    }
    if(m_PendingCreditIsSet)
    {
        val[utility::conversions::to_string_t("pendingCredit")] = ModelBase::toJson(m_PendingCredit);
    }
    if(m_PendingDebitIsSet)
    {
        val[utility::conversions::to_string_t("pendingDebit")] = ModelBase::toJson(m_PendingDebit);
    }
    if(m_ConfirmedDebitIsSet)
    {
        val[utility::conversions::to_string_t("confirmedDebit")] = ModelBase::toJson(m_ConfirmedDebit);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

void Wallet::fromJson(web::json::value& val)
{
    setAccount(ModelBase::int64_tFromJson(val[utility::conversions::to_string_t("account")]));
    setCurrency(ModelBase::stringFromJson(val[utility::conversions::to_string_t("currency")]));
    if(val.has_field(utility::conversions::to_string_t("deposited")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("deposited")];
        if(!fieldValue.is_null())
        {
            setDeposited(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("withdrawn")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("withdrawn")];
        if(!fieldValue.is_null())
        {
            setWithdrawn(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transferIn")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("transferIn")];
        if(!fieldValue.is_null())
        {
            setTransferIn(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("transferOut")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("transferOut")];
        if(!fieldValue.is_null())
        {
            setTransferOut(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("amount")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("amount")];
        if(!fieldValue.is_null())
        {
            setAmount(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pendingCredit")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("pendingCredit")];
        if(!fieldValue.is_null())
        {
            setPendingCredit(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pendingDebit")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("pendingDebit")];
        if(!fieldValue.is_null())
        {
            setPendingDebit(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("confirmedDebit")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("confirmedDebit")];
        if(!fieldValue.is_null())
        {
            setConfirmedDebit(ModelBase::int64_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("timestamp")];
        if(!fieldValue.is_null())
        {
            setTimestamp(ModelBase::dateFromJson(fieldValue));
        }
    }
}

void Wallet::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account"), m_Account));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("currency"), m_Currency));
    if(m_DepositedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deposited"), m_Deposited));
    }
    if(m_WithdrawnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("withdrawn"), m_Withdrawn));
    }
    if(m_TransferInIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("transferIn"), m_TransferIn));
    }
    if(m_TransferOutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("transferOut"), m_TransferOut));
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("amount"), m_Amount));
    }
    if(m_PendingCreditIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pendingCredit"), m_PendingCredit));
    }
    if(m_PendingDebitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pendingDebit"), m_PendingDebit));
    }
    if(m_ConfirmedDebitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("confirmedDebit"), m_ConfirmedDebit));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
        
    }
}

void Wallet::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setAccount(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("account"))));
    setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("currency"))));
    if(multipart->hasContent(utility::conversions::to_string_t("deposited")))
    {
        setDeposited(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("deposited"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("withdrawn")))
    {
        setWithdrawn(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("withdrawn"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transferIn")))
    {
        setTransferIn(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("transferIn"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("transferOut")))
    {
        setTransferOut(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("transferOut"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("amount")))
    {
        setAmount(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("amount"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pendingCredit")))
    {
        setPendingCredit(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("pendingCredit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pendingDebit")))
    {
        setPendingDebit(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("pendingDebit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("confirmedDebit")))
    {
        setConfirmedDebit(ModelBase::int64_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("confirmedDebit"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    }
}

int64_t Wallet::getAccount() const
{
    return m_Account;
}


void Wallet::setAccount(int64_t value)
{
    m_Account = value;
    
}
utility::string_t Wallet::getCurrency() const
{
    return m_Currency;
}


void Wallet::setCurrency(utility::string_t value)
{
    m_Currency = value;
    
}
int64_t Wallet::getDeposited() const
{
    return m_Deposited;
}


void Wallet::setDeposited(int64_t value)
{
    m_Deposited = value;
    m_DepositedIsSet = true;
}
bool Wallet::depositedIsSet() const
{
    return m_DepositedIsSet;
}

void Wallet::unsetDeposited()
{
    m_DepositedIsSet = false;
}

int64_t Wallet::getWithdrawn() const
{
    return m_Withdrawn;
}


void Wallet::setWithdrawn(int64_t value)
{
    m_Withdrawn = value;
    m_WithdrawnIsSet = true;
}
bool Wallet::withdrawnIsSet() const
{
    return m_WithdrawnIsSet;
}

void Wallet::unsetWithdrawn()
{
    m_WithdrawnIsSet = false;
}

int64_t Wallet::getTransferIn() const
{
    return m_TransferIn;
}


void Wallet::setTransferIn(int64_t value)
{
    m_TransferIn = value;
    m_TransferInIsSet = true;
}
bool Wallet::transferInIsSet() const
{
    return m_TransferInIsSet;
}

void Wallet::unsetTransferIn()
{
    m_TransferInIsSet = false;
}

int64_t Wallet::getTransferOut() const
{
    return m_TransferOut;
}


void Wallet::setTransferOut(int64_t value)
{
    m_TransferOut = value;
    m_TransferOutIsSet = true;
}
bool Wallet::transferOutIsSet() const
{
    return m_TransferOutIsSet;
}

void Wallet::unsetTransferOut()
{
    m_TransferOutIsSet = false;
}

int64_t Wallet::getAmount() const
{
    return m_Amount;
}


void Wallet::setAmount(int64_t value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}
bool Wallet::amountIsSet() const
{
    return m_AmountIsSet;
}

void Wallet::unsetAmount()
{
    m_AmountIsSet = false;
}

int64_t Wallet::getPendingCredit() const
{
    return m_PendingCredit;
}


void Wallet::setPendingCredit(int64_t value)
{
    m_PendingCredit = value;
    m_PendingCreditIsSet = true;
}
bool Wallet::pendingCreditIsSet() const
{
    return m_PendingCreditIsSet;
}

void Wallet::unsetPendingCredit()
{
    m_PendingCreditIsSet = false;
}

int64_t Wallet::getPendingDebit() const
{
    return m_PendingDebit;
}


void Wallet::setPendingDebit(int64_t value)
{
    m_PendingDebit = value;
    m_PendingDebitIsSet = true;
}
bool Wallet::pendingDebitIsSet() const
{
    return m_PendingDebitIsSet;
}

void Wallet::unsetPendingDebit()
{
    m_PendingDebitIsSet = false;
}

int64_t Wallet::getConfirmedDebit() const
{
    return m_ConfirmedDebit;
}


void Wallet::setConfirmedDebit(int64_t value)
{
    m_ConfirmedDebit = value;
    m_ConfirmedDebitIsSet = true;
}
bool Wallet::confirmedDebitIsSet() const
{
    return m_ConfirmedDebitIsSet;
}

void Wallet::unsetConfirmedDebit()
{
    m_ConfirmedDebitIsSet = false;
}

utility::datetime Wallet::getTimestamp() const
{
    return m_Timestamp;
}


void Wallet::setTimestamp(utility::datetime value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool Wallet::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Wallet::unsetTimestamp()
{
    m_TimestampIsSet = false;
}

}
}
}
}

