/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  _If you are building automated tools, please subscribe to the_ _[BitMEX API RSS Feed](https://blog.bitmex.com/api_announcement/feed/) for changes. The feed will be updated_ _regularly and is the most reliable way to get downtime and update announcements._  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.42-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Position.h
 *
 * Summary of Open and Closed Positions
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_Position_H_
#define IO_SWAGGER_CLIENT_MODEL_Position_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Summary of Open and Closed Positions
/// </summary>
class  Position
    : public ModelBase
{
public:
    Position();
    virtual ~Position();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Position members

    /// <summary>
    /// 
    /// </summary>
    int64_t getAccount() const;
        void setAccount(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSymbol() const;
        void setSymbol(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrency() const;
    bool currencyIsSet() const;
    void unsetCurrency();
    void setCurrency(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUnderlying() const;
    bool underlyingIsSet() const;
    void unsetUnderlying();
    void setUnderlying(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getQuoteCurrency() const;
    bool quoteCurrencyIsSet() const;
    void unsetQuoteCurrency();
    void setQuoteCurrency(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getCommission() const;
    bool commissionIsSet() const;
    void unsetCommission();
    void setCommission(double value);
    /// <summary>
    /// 
    /// </summary>
    double getInitMarginReq() const;
    bool initMarginReqIsSet() const;
    void unsetInitMarginReq();
    void setInitMarginReq(double value);
    /// <summary>
    /// 
    /// </summary>
    double getMaintMarginReq() const;
    bool maintMarginReqIsSet() const;
    void unsetMaintMarginReq();
    void setMaintMarginReq(double value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getRiskLimit() const;
    bool riskLimitIsSet() const;
    void unsetRiskLimit();
    void setRiskLimit(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    double getLeverage() const;
    bool leverageIsSet() const;
    void unsetLeverage();
    void setLeverage(double value);
    /// <summary>
    /// 
    /// </summary>
    bool isCrossMargin() const;
    bool crossMarginIsSet() const;
    void unsetCrossMargin();
    void setCrossMargin(bool value);
    /// <summary>
    /// 
    /// </summary>
    double getDeleveragePercentile() const;
    bool deleveragePercentileIsSet() const;
    void unsetDeleveragePercentile();
    void setDeleveragePercentile(double value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getRebalancedPnl() const;
    bool rebalancedPnlIsSet() const;
    void unsetRebalancedPnl();
    void setRebalancedPnl(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getPrevRealisedPnl() const;
    bool prevRealisedPnlIsSet() const;
    void unsetPrevRealisedPnl();
    void setPrevRealisedPnl(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getPrevUnrealisedPnl() const;
    bool prevUnrealisedPnlIsSet() const;
    void unsetPrevUnrealisedPnl();
    void setPrevUnrealisedPnl(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getOpeningQty() const;
    bool openingQtyIsSet() const;
    void unsetOpeningQty();
    void setOpeningQty(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getOpenOrderBuyQty() const;
    bool openOrderBuyQtyIsSet() const;
    void unsetOpenOrderBuyQty();
    void setOpenOrderBuyQty(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getOpenOrderBuyCost() const;
    bool openOrderBuyCostIsSet() const;
    void unsetOpenOrderBuyCost();
    void setOpenOrderBuyCost(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getOpenOrderBuyPremium() const;
    bool openOrderBuyPremiumIsSet() const;
    void unsetOpenOrderBuyPremium();
    void setOpenOrderBuyPremium(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getOpenOrderSellQty() const;
    bool openOrderSellQtyIsSet() const;
    void unsetOpenOrderSellQty();
    void setOpenOrderSellQty(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getOpenOrderSellCost() const;
    bool openOrderSellCostIsSet() const;
    void unsetOpenOrderSellCost();
    void setOpenOrderSellCost(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getOpenOrderSellPremium() const;
    bool openOrderSellPremiumIsSet() const;
    void unsetOpenOrderSellPremium();
    void setOpenOrderSellPremium(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getCurrentQty() const;
    bool currentQtyIsSet() const;
    void unsetCurrentQty();
    void setCurrentQty(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getCurrentCost() const;
    bool currentCostIsSet() const;
    void unsetCurrentCost();
    void setCurrentCost(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getCurrentComm() const;
    bool currentCommIsSet() const;
    void unsetCurrentComm();
    void setCurrentComm(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getRealisedCost() const;
    bool realisedCostIsSet() const;
    void unsetRealisedCost();
    void setRealisedCost(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getUnrealisedCost() const;
    bool unrealisedCostIsSet() const;
    void unsetUnrealisedCost();
    void setUnrealisedCost(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getGrossOpenPremium() const;
    bool grossOpenPremiumIsSet() const;
    void unsetGrossOpenPremium();
    void setGrossOpenPremium(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    bool isIsOpen() const;
    bool isOpenIsSet() const;
    void unsetIsOpen();
    void setIsOpen(bool value);
    /// <summary>
    /// 
    /// </summary>
    double getMarkPrice() const;
    bool markPriceIsSet() const;
    void unsetMarkPrice();
    void setMarkPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getMarkValue() const;
    bool markValueIsSet() const;
    void unsetMarkValue();
    void setMarkValue(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getRiskValue() const;
    bool riskValueIsSet() const;
    void unsetRiskValue();
    void setRiskValue(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    double getHomeNotional() const;
    bool homeNotionalIsSet() const;
    void unsetHomeNotional();
    void setHomeNotional(double value);
    /// <summary>
    /// 
    /// </summary>
    double getForeignNotional() const;
    bool foreignNotionalIsSet() const;
    void unsetForeignNotional();
    void setForeignNotional(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPosState() const;
    bool posStateIsSet() const;
    void unsetPosState();
    void setPosState(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getPosCost() const;
    bool posCostIsSet() const;
    void unsetPosCost();
    void setPosCost(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getPosCross() const;
    bool posCrossIsSet() const;
    void unsetPosCross();
    void setPosCross(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getPosComm() const;
    bool posCommIsSet() const;
    void unsetPosComm();
    void setPosComm(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getPosLoss() const;
    bool posLossIsSet() const;
    void unsetPosLoss();
    void setPosLoss(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getPosMargin() const;
    bool posMarginIsSet() const;
    void unsetPosMargin();
    void setPosMargin(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getPosMaint() const;
    bool posMaintIsSet() const;
    void unsetPosMaint();
    void setPosMaint(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getInitMargin() const;
    bool initMarginIsSet() const;
    void unsetInitMargin();
    void setInitMargin(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getMaintMargin() const;
    bool maintMarginIsSet() const;
    void unsetMaintMargin();
    void setMaintMargin(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getRealisedPnl() const;
    bool realisedPnlIsSet() const;
    void unsetRealisedPnl();
    void setRealisedPnl(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getUnrealisedPnl() const;
    bool unrealisedPnlIsSet() const;
    void unsetUnrealisedPnl();
    void setUnrealisedPnl(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    double getUnrealisedPnlPcnt() const;
    bool unrealisedPnlPcntIsSet() const;
    void unsetUnrealisedPnlPcnt();
    void setUnrealisedPnlPcnt(double value);
    /// <summary>
    /// 
    /// </summary>
    double getUnrealisedRoePcnt() const;
    bool unrealisedRoePcntIsSet() const;
    void unsetUnrealisedRoePcnt();
    void setUnrealisedRoePcnt(double value);
    /// <summary>
    /// 
    /// </summary>
    double getAvgCostPrice() const;
    bool avgCostPriceIsSet() const;
    void unsetAvgCostPrice();
    void setAvgCostPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getAvgEntryPrice() const;
    bool avgEntryPriceIsSet() const;
    void unsetAvgEntryPrice();
    void setAvgEntryPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getBreakEvenPrice() const;
    bool breakEvenPriceIsSet() const;
    void unsetBreakEvenPrice();
    void setBreakEvenPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getMarginCallPrice() const;
    bool marginCallPriceIsSet() const;
    void unsetMarginCallPrice();
    void setMarginCallPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getLiquidationPrice() const;
    bool liquidationPriceIsSet() const;
    void unsetLiquidationPrice();
    void setLiquidationPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    double getBankruptPrice() const;
    bool bankruptPriceIsSet() const;
    void unsetBankruptPrice();
    void setBankruptPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();
    void setTimestamp(utility::datetime value);

protected:
    int64_t m_Account;
        utility::string_t m_Symbol;
        utility::string_t m_Currency;
    bool m_CurrencyIsSet;
    utility::string_t m_Underlying;
    bool m_UnderlyingIsSet;
    utility::string_t m_QuoteCurrency;
    bool m_QuoteCurrencyIsSet;
    double m_Commission;
    bool m_CommissionIsSet;
    double m_InitMarginReq;
    bool m_InitMarginReqIsSet;
    double m_MaintMarginReq;
    bool m_MaintMarginReqIsSet;
    int64_t m_RiskLimit;
    bool m_RiskLimitIsSet;
    double m_Leverage;
    bool m_LeverageIsSet;
    bool m_CrossMargin;
    bool m_CrossMarginIsSet;
    double m_DeleveragePercentile;
    bool m_DeleveragePercentileIsSet;
    int64_t m_RebalancedPnl;
    bool m_RebalancedPnlIsSet;
    int64_t m_PrevRealisedPnl;
    bool m_PrevRealisedPnlIsSet;
    int64_t m_PrevUnrealisedPnl;
    bool m_PrevUnrealisedPnlIsSet;
    int64_t m_OpeningQty;
    bool m_OpeningQtyIsSet;
    int64_t m_OpenOrderBuyQty;
    bool m_OpenOrderBuyQtyIsSet;
    int64_t m_OpenOrderBuyCost;
    bool m_OpenOrderBuyCostIsSet;
    int64_t m_OpenOrderBuyPremium;
    bool m_OpenOrderBuyPremiumIsSet;
    int64_t m_OpenOrderSellQty;
    bool m_OpenOrderSellQtyIsSet;
    int64_t m_OpenOrderSellCost;
    bool m_OpenOrderSellCostIsSet;
    int64_t m_OpenOrderSellPremium;
    bool m_OpenOrderSellPremiumIsSet;
    int64_t m_CurrentQty;
    bool m_CurrentQtyIsSet;
    int64_t m_CurrentCost;
    bool m_CurrentCostIsSet;
    int64_t m_CurrentComm;
    bool m_CurrentCommIsSet;
    int64_t m_RealisedCost;
    bool m_RealisedCostIsSet;
    int64_t m_UnrealisedCost;
    bool m_UnrealisedCostIsSet;
    int64_t m_GrossOpenPremium;
    bool m_GrossOpenPremiumIsSet;
    bool m_IsOpen;
    bool m_IsOpenIsSet;
    double m_MarkPrice;
    bool m_MarkPriceIsSet;
    int64_t m_MarkValue;
    bool m_MarkValueIsSet;
    int64_t m_RiskValue;
    bool m_RiskValueIsSet;
    double m_HomeNotional;
    bool m_HomeNotionalIsSet;
    double m_ForeignNotional;
    bool m_ForeignNotionalIsSet;
    utility::string_t m_PosState;
    bool m_PosStateIsSet;
    int64_t m_PosCost;
    bool m_PosCostIsSet;
    int64_t m_PosCross;
    bool m_PosCrossIsSet;
    int64_t m_PosComm;
    bool m_PosCommIsSet;
    int64_t m_PosLoss;
    bool m_PosLossIsSet;
    int64_t m_PosMargin;
    bool m_PosMarginIsSet;
    int64_t m_PosMaint;
    bool m_PosMaintIsSet;
    int64_t m_InitMargin;
    bool m_InitMarginIsSet;
    int64_t m_MaintMargin;
    bool m_MaintMarginIsSet;
    int64_t m_RealisedPnl;
    bool m_RealisedPnlIsSet;
    int64_t m_UnrealisedPnl;
    bool m_UnrealisedPnlIsSet;
    double m_UnrealisedPnlPcnt;
    bool m_UnrealisedPnlPcntIsSet;
    double m_UnrealisedRoePcnt;
    bool m_UnrealisedRoePcntIsSet;
    double m_AvgCostPrice;
    bool m_AvgCostPriceIsSet;
    double m_AvgEntryPrice;
    bool m_AvgEntryPriceIsSet;
    double m_BreakEvenPrice;
    bool m_BreakEvenPriceIsSet;
    double m_MarginCallPrice;
    bool m_MarginCallPriceIsSet;
    double m_LiquidationPrice;
    bool m_LiquidationPriceIsSet;
    double m_BankruptPrice;
    bool m_BankruptPriceIsSet;
    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_Position_H_ */
